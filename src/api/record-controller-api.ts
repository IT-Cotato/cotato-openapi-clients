/* tslint:disable */
/* eslint-disable */
/**
 * CS-QUIZ 프로젝트 API 명세서
 * quiz api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CotatoRecordsAndScorerResponse } from '../model';
// @ts-ignore
import type { CotatoRegradeRequest } from '../model';
// @ts-ignore
import type { CotatoReplyRequest } from '../model';
// @ts-ignore
import type { CotatoReplyResponse } from '../model';
/**
 * RecordControllerApi - axios parameter creator
 * @export
 */
export const RecordControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRecordsAndScorerByQuiz: async (quizId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('findRecordsAndScorerByQuiz', 'quizId', quizId)
            const localVarPath = `/v1/api/record/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (quizId !== undefined) {
                localVarQueryParameter['quizId'] = quizId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoRegradeRequest} cotatoRegradeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regradeQuiz: async (cotatoRegradeRequest: CotatoRegradeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoRegradeRequest' is not null or undefined
            assertParamExists('regradeQuiz', 'cotatoRegradeRequest', cotatoRegradeRequest)
            const localVarPath = `/v1/api/record/regrade`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoRegradeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoReplyRequest} cotatoReplyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replyToQuiz: async (cotatoReplyRequest: CotatoReplyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoReplyRequest' is not null or undefined
            assertParamExists('replyToQuiz', 'cotatoReplyRequest', cotatoReplyRequest)
            const localVarPath = `/v1/api/record/reply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoReplyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecordControllerApi - functional programming interface
 * @export
 */
export const RecordControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecordControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findRecordsAndScorerByQuiz(quizId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoRecordsAndScorerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findRecordsAndScorerByQuiz(quizId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecordControllerApi.findRecordsAndScorerByQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoRegradeRequest} cotatoRegradeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regradeQuiz(cotatoRegradeRequest: CotatoRegradeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.regradeQuiz(cotatoRegradeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecordControllerApi.regradeQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoReplyRequest} cotatoReplyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replyToQuiz(cotatoReplyRequest: CotatoReplyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoReplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replyToQuiz(cotatoReplyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecordControllerApi.replyToQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RecordControllerApi - factory interface
 * @export
 */
export const RecordControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecordControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRecordsAndScorerByQuiz(quizId: number, options?: any): AxiosPromise<CotatoRecordsAndScorerResponse> {
            return localVarFp.findRecordsAndScorerByQuiz(quizId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CotatoRegradeRequest} cotatoRegradeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regradeQuiz(cotatoRegradeRequest: CotatoRegradeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.regradeQuiz(cotatoRegradeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CotatoReplyRequest} cotatoReplyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replyToQuiz(cotatoReplyRequest: CotatoReplyRequest, options?: any): AxiosPromise<CotatoReplyResponse> {
            return localVarFp.replyToQuiz(cotatoReplyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecordControllerApi - object-oriented interface
 * @export
 * @class RecordControllerApi
 * @extends {BaseAPI}
 */
export class RecordControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} quizId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public findRecordsAndScorerByQuiz(quizId: number, options?: RawAxiosRequestConfig) {
        return RecordControllerApiFp(this.configuration).findRecordsAndScorerByQuiz(quizId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CotatoRegradeRequest} cotatoRegradeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public regradeQuiz(cotatoRegradeRequest: CotatoRegradeRequest, options?: RawAxiosRequestConfig) {
        return RecordControllerApiFp(this.configuration).regradeQuiz(cotatoRegradeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CotatoReplyRequest} cotatoReplyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public replyToQuiz(cotatoReplyRequest: CotatoReplyRequest, options?: RawAxiosRequestConfig) {
        return RecordControllerApiFp(this.configuration).replyToQuiz(cotatoReplyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

