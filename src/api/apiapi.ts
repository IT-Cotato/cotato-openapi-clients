/* tslint:disable */
/* eslint-disable */
/**
 * CS-QUIZ 프로젝트 API 명세서
 * quiz api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CotatoAddGenerationRequest } from '../model';
// @ts-ignore
import type { CotatoAddGenerationResponse } from '../model';
// @ts-ignore
import type { CotatoChangeGenerationPeriodRequest } from '../model';
// @ts-ignore
import type { CotatoChangeRecruitingStatusRequest } from '../model';
// @ts-ignore
import type { CotatoCheckMemberPoliciesRequest } from '../model';
// @ts-ignore
import type { CotatoFindMemberPolicyResponse } from '../model';
// @ts-ignore
import type { CotatoFindPasswordResponse } from '../model';
// @ts-ignore
import type { CotatoGenerationInfoResponse } from '../model';
// @ts-ignore
import type { CotatoJoinRequest } from '../model';
// @ts-ignore
import type { CotatoJoinResponse } from '../model';
// @ts-ignore
import type { CotatoLogoutRequest } from '../model';
// @ts-ignore
import type { CotatoMemberEmailResponse } from '../model';
// @ts-ignore
import type { CotatoPoliciesResponse } from '../model';
// @ts-ignore
import type { CotatoReissueResponse } from '../model';
// @ts-ignore
import type { CotatoSendEmailRequest } from '../model';
/**
 * APIApi - axios parameter creator
 * @export
 */
export const APIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CotatoAddGenerationRequest} cotatoAddGenerationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGeneration: async (cotatoAddGenerationRequest: CotatoAddGenerationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoAddGenerationRequest' is not null or undefined
            assertParamExists('addGeneration', 'cotatoAddGenerationRequest', cotatoAddGenerationRequest)
            const localVarPath = `/v1/api/generation/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoAddGenerationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoChangeGenerationPeriodRequest} cotatoChangeGenerationPeriodRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeGenerationPeriod: async (cotatoChangeGenerationPeriodRequest: CotatoChangeGenerationPeriodRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoChangeGenerationPeriodRequest' is not null or undefined
            assertParamExists('changeGenerationPeriod', 'cotatoChangeGenerationPeriodRequest', cotatoChangeGenerationPeriodRequest)
            const localVarPath = `/v1/api/generation/period`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoChangeGenerationPeriodRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoChangeRecruitingStatusRequest} cotatoChangeRecruitingStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeRecruitingStatus: async (cotatoChangeRecruitingStatusRequest: CotatoChangeRecruitingStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoChangeRecruitingStatusRequest' is not null or undefined
            assertParamExists('changeRecruitingStatus', 'cotatoChangeRecruitingStatusRequest', cotatoChangeRecruitingStatusRequest)
            const localVarPath = `/v1/api/generation/recruiting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoChangeRecruitingStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 특정 정책에 대해 동의 여부 체크 API
         * @param {CotatoCheckMemberPoliciesRequest} cotatoCheckMemberPoliciesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPolicies: async (cotatoCheckMemberPoliciesRequest: CotatoCheckMemberPoliciesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoCheckMemberPoliciesRequest' is not null or undefined
            assertParamExists('checkPolicies', 'cotatoCheckMemberPoliciesRequest', cotatoCheckMemberPoliciesRequest)
            const localVarPath = `/v2/api/policies/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoCheckMemberPoliciesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEmail: async (name: string, phone: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('findEmail', 'name', name)
            // verify required parameter 'phone' is not null or undefined
            assertParamExists('findEmail', 'phone', phone)
            const localVarPath = `/v1/api/auth/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findGenerations: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/api/generation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 가입 시 정책 목록 반환 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicies: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/api/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 체크하지 않은 정책 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnCheckedPolicies: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/api/policies/essential`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 가입 API
         * @param {CotatoJoinRequest} cotatoJoinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinAuth: async (cotatoJoinRequest: CotatoJoinRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoJoinRequest' is not null or undefined
            assertParamExists('joinAuth', 'cotatoJoinRequest', cotatoJoinRequest)
            const localVarPath = `/v1/api/auth/join`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoJoinRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} refreshToken 
         * @param {CotatoLogoutRequest} cotatoLogoutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (refreshToken: string, cotatoLogoutRequest: CotatoLogoutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshToken' is not null or undefined
            assertParamExists('logout', 'refreshToken', refreshToken)
            // verify required parameter 'cotatoLogoutRequest' is not null or undefined
            assertParamExists('logout', 'cotatoLogoutRequest', cotatoLogoutRequest)
            const localVarPath = `/v1/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoLogoutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoSendEmailRequest} cotatoSendEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSignUpVerificationCode1: async (cotatoSendEmailRequest: CotatoSendEmailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoSendEmailRequest' is not null or undefined
            assertParamExists('sendSignUpVerificationCode1', 'cotatoSendEmailRequest', cotatoSendEmailRequest)
            const localVarPath = `/v1/api/auth/verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoSendEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} refreshToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenReissue: async (refreshToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshToken' is not null or undefined
            assertParamExists('tokenReissue', 'refreshToken', refreshToken)
            const localVarPath = `/v1/api/auth/reissue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} email 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyCode1: async (email: string, code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('verifyCode1', 'email', email)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('verifyCode1', 'code', code)
            const localVarPath = `/v1/api/auth/verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APIApi - functional programming interface
 * @export
 */
export const APIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = APIApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CotatoAddGenerationRequest} cotatoAddGenerationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addGeneration(cotatoAddGenerationRequest: CotatoAddGenerationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoAddGenerationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addGeneration(cotatoAddGenerationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.addGeneration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoChangeGenerationPeriodRequest} cotatoChangeGenerationPeriodRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeGenerationPeriod(cotatoChangeGenerationPeriodRequest: CotatoChangeGenerationPeriodRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeGenerationPeriod(cotatoChangeGenerationPeriodRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.changeGenerationPeriod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoChangeRecruitingStatusRequest} cotatoChangeRecruitingStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeRecruitingStatus(cotatoChangeRecruitingStatusRequest: CotatoChangeRecruitingStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeRecruitingStatus(cotatoChangeRecruitingStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.changeRecruitingStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 특정 정책에 대해 동의 여부 체크 API
         * @param {CotatoCheckMemberPoliciesRequest} cotatoCheckMemberPoliciesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkPolicies(cotatoCheckMemberPoliciesRequest: CotatoCheckMemberPoliciesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkPolicies(cotatoCheckMemberPoliciesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.checkPolicies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} name 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findEmail(name: string, phone: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoMemberEmailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findEmail(name, phone, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.findEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findGenerations(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CotatoGenerationInfoResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findGenerations(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.findGenerations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 가입 시 정책 목록 반환 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicies(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoPoliciesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicies(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.getPolicies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 체크하지 않은 정책 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnCheckedPolicies(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoFindMemberPolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnCheckedPolicies(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.getUnCheckedPolicies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 가입 API
         * @param {CotatoJoinRequest} cotatoJoinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinAuth(cotatoJoinRequest: CotatoJoinRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoJoinResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinAuth(cotatoJoinRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.joinAuth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} refreshToken 
         * @param {CotatoLogoutRequest} cotatoLogoutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(refreshToken: string, cotatoLogoutRequest: CotatoLogoutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(refreshToken, cotatoLogoutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoSendEmailRequest} cotatoSendEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendSignUpVerificationCode1(cotatoSendEmailRequest: CotatoSendEmailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendSignUpVerificationCode1(cotatoSendEmailRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.sendSignUpVerificationCode1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} refreshToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenReissue(refreshToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoReissueResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenReissue(refreshToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.tokenReissue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} email 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyCode1(email: string, code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoFindPasswordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyCode1(email, code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.verifyCode1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * APIApi - factory interface
 * @export
 */
export const APIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = APIApiFp(configuration)
    return {
        /**
         * 
         * @param {APIApiAddGenerationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGeneration(requestParameters: APIApiAddGenerationRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoAddGenerationResponse> {
            return localVarFp.addGeneration(requestParameters.cotatoAddGenerationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {APIApiChangeGenerationPeriodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeGenerationPeriod(requestParameters: APIApiChangeGenerationPeriodRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.changeGenerationPeriod(requestParameters.cotatoChangeGenerationPeriodRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {APIApiChangeRecruitingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeRecruitingStatus(requestParameters: APIApiChangeRecruitingStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.changeRecruitingStatus(requestParameters.cotatoChangeRecruitingStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 특정 정책에 대해 동의 여부 체크 API
         * @param {APIApiCheckPoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPolicies(requestParameters: APIApiCheckPoliciesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.checkPolicies(requestParameters.cotatoCheckMemberPoliciesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {APIApiFindEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEmail(requestParameters: APIApiFindEmailRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoMemberEmailResponse> {
            return localVarFp.findEmail(requestParameters.name, requestParameters.phone, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findGenerations(options?: RawAxiosRequestConfig): AxiosPromise<Array<CotatoGenerationInfoResponse>> {
            return localVarFp.findGenerations(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 가입 시 정책 목록 반환 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicies(options?: RawAxiosRequestConfig): AxiosPromise<CotatoPoliciesResponse> {
            return localVarFp.getPolicies(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 체크하지 않은 정책 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnCheckedPolicies(options?: RawAxiosRequestConfig): AxiosPromise<CotatoFindMemberPolicyResponse> {
            return localVarFp.getUnCheckedPolicies(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 가입 API
         * @param {APIApiJoinAuthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinAuth(requestParameters: APIApiJoinAuthRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoJoinResponse> {
            return localVarFp.joinAuth(requestParameters.cotatoJoinRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {APIApiLogoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(requestParameters: APIApiLogoutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logout(requestParameters.refreshToken, requestParameters.cotatoLogoutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {APIApiSendSignUpVerificationCode1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSignUpVerificationCode1(requestParameters: APIApiSendSignUpVerificationCode1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendSignUpVerificationCode1(requestParameters.cotatoSendEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {APIApiTokenReissueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenReissue(requestParameters: APIApiTokenReissueRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoReissueResponse> {
            return localVarFp.tokenReissue(requestParameters.refreshToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {APIApiVerifyCode1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyCode1(requestParameters: APIApiVerifyCode1Request, options?: RawAxiosRequestConfig): AxiosPromise<CotatoFindPasswordResponse> {
            return localVarFp.verifyCode1(requestParameters.email, requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addGeneration operation in APIApi.
 * @export
 * @interface APIApiAddGenerationRequest
 */
export interface APIApiAddGenerationRequest {
    /**
     * 
     * @type {CotatoAddGenerationRequest}
     * @memberof APIApiAddGeneration
     */
    readonly cotatoAddGenerationRequest: CotatoAddGenerationRequest
}

/**
 * Request parameters for changeGenerationPeriod operation in APIApi.
 * @export
 * @interface APIApiChangeGenerationPeriodRequest
 */
export interface APIApiChangeGenerationPeriodRequest {
    /**
     * 
     * @type {CotatoChangeGenerationPeriodRequest}
     * @memberof APIApiChangeGenerationPeriod
     */
    readonly cotatoChangeGenerationPeriodRequest: CotatoChangeGenerationPeriodRequest
}

/**
 * Request parameters for changeRecruitingStatus operation in APIApi.
 * @export
 * @interface APIApiChangeRecruitingStatusRequest
 */
export interface APIApiChangeRecruitingStatusRequest {
    /**
     * 
     * @type {CotatoChangeRecruitingStatusRequest}
     * @memberof APIApiChangeRecruitingStatus
     */
    readonly cotatoChangeRecruitingStatusRequest: CotatoChangeRecruitingStatusRequest
}

/**
 * Request parameters for checkPolicies operation in APIApi.
 * @export
 * @interface APIApiCheckPoliciesRequest
 */
export interface APIApiCheckPoliciesRequest {
    /**
     * 
     * @type {CotatoCheckMemberPoliciesRequest}
     * @memberof APIApiCheckPolicies
     */
    readonly cotatoCheckMemberPoliciesRequest: CotatoCheckMemberPoliciesRequest
}

/**
 * Request parameters for findEmail operation in APIApi.
 * @export
 * @interface APIApiFindEmailRequest
 */
export interface APIApiFindEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof APIApiFindEmail
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof APIApiFindEmail
     */
    readonly phone: string
}

/**
 * Request parameters for joinAuth operation in APIApi.
 * @export
 * @interface APIApiJoinAuthRequest
 */
export interface APIApiJoinAuthRequest {
    /**
     * 
     * @type {CotatoJoinRequest}
     * @memberof APIApiJoinAuth
     */
    readonly cotatoJoinRequest: CotatoJoinRequest
}

/**
 * Request parameters for logout operation in APIApi.
 * @export
 * @interface APIApiLogoutRequest
 */
export interface APIApiLogoutRequest {
    /**
     * 
     * @type {string}
     * @memberof APIApiLogout
     */
    readonly refreshToken: string

    /**
     * 
     * @type {CotatoLogoutRequest}
     * @memberof APIApiLogout
     */
    readonly cotatoLogoutRequest: CotatoLogoutRequest
}

/**
 * Request parameters for sendSignUpVerificationCode1 operation in APIApi.
 * @export
 * @interface APIApiSendSignUpVerificationCode1Request
 */
export interface APIApiSendSignUpVerificationCode1Request {
    /**
     * 
     * @type {CotatoSendEmailRequest}
     * @memberof APIApiSendSignUpVerificationCode1
     */
    readonly cotatoSendEmailRequest: CotatoSendEmailRequest
}

/**
 * Request parameters for tokenReissue operation in APIApi.
 * @export
 * @interface APIApiTokenReissueRequest
 */
export interface APIApiTokenReissueRequest {
    /**
     * 
     * @type {string}
     * @memberof APIApiTokenReissue
     */
    readonly refreshToken: string
}

/**
 * Request parameters for verifyCode1 operation in APIApi.
 * @export
 * @interface APIApiVerifyCode1Request
 */
export interface APIApiVerifyCode1Request {
    /**
     * 
     * @type {string}
     * @memberof APIApiVerifyCode1
     */
    readonly email: string

    /**
     * 
     * @type {string}
     * @memberof APIApiVerifyCode1
     */
    readonly code: string
}

/**
 * APIApi - object-oriented interface
 * @export
 * @class APIApi
 * @extends {BaseAPI}
 */
export class APIApi extends BaseAPI {
    /**
     * 
     * @param {APIApiAddGenerationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public addGeneration(requestParameters: APIApiAddGenerationRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).addGeneration(requestParameters.cotatoAddGenerationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {APIApiChangeGenerationPeriodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public changeGenerationPeriod(requestParameters: APIApiChangeGenerationPeriodRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).changeGenerationPeriod(requestParameters.cotatoChangeGenerationPeriodRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {APIApiChangeRecruitingStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public changeRecruitingStatus(requestParameters: APIApiChangeRecruitingStatusRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).changeRecruitingStatus(requestParameters.cotatoChangeRecruitingStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 특정 정책에 대해 동의 여부 체크 API
     * @param {APIApiCheckPoliciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public checkPolicies(requestParameters: APIApiCheckPoliciesRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).checkPolicies(requestParameters.cotatoCheckMemberPoliciesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {APIApiFindEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public findEmail(requestParameters: APIApiFindEmailRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).findEmail(requestParameters.name, requestParameters.phone, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public findGenerations(options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).findGenerations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 가입 시 정책 목록 반환 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public getPolicies(options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).getPolicies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 체크하지 않은 정책 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public getUnCheckedPolicies(options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).getUnCheckedPolicies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 가입 API
     * @param {APIApiJoinAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public joinAuth(requestParameters: APIApiJoinAuthRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).joinAuth(requestParameters.cotatoJoinRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {APIApiLogoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public logout(requestParameters: APIApiLogoutRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).logout(requestParameters.refreshToken, requestParameters.cotatoLogoutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {APIApiSendSignUpVerificationCode1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public sendSignUpVerificationCode1(requestParameters: APIApiSendSignUpVerificationCode1Request, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).sendSignUpVerificationCode1(requestParameters.cotatoSendEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {APIApiTokenReissueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public tokenReissue(requestParameters: APIApiTokenReissueRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).tokenReissue(requestParameters.refreshToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {APIApiVerifyCode1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public verifyCode1(requestParameters: APIApiVerifyCode1Request, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).verifyCode1(requestParameters.email, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}

