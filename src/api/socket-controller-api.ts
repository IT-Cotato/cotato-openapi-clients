/* tslint:disable */
/* eslint-disable */
/**
 * CS-QUIZ 프로젝트 API 명세서
 * quiz api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CotatoEducationCloseRequest } from '../model';
// @ts-ignore
import type { CotatoEducationOpenRequest } from '../model';
// @ts-ignore
import type { CotatoQuizSocketRequest } from '../model';
// @ts-ignore
import type { CotatoSocketTokenDto } from '../model';
/**
 * SocketControllerApi - axios parameter creator
 * @export
 */
export const SocketControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CotatoQuizSocketRequest} cotatoQuizSocketRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessQuiz: async (cotatoQuizSocketRequest: CotatoQuizSocketRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoQuizSocketRequest' is not null or undefined
            assertParamExists('accessQuiz', 'cotatoQuizSocketRequest', cotatoQuizSocketRequest)
            const localVarPath = `/v1/api/socket/access`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoQuizSocketRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoEducationCloseRequest} cotatoEducationCloseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeEducation: async (cotatoEducationCloseRequest: CotatoEducationCloseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoEducationCloseRequest' is not null or undefined
            assertParamExists('closeEducation', 'cotatoEducationCloseRequest', cotatoEducationCloseRequest)
            const localVarPath = `/v1/api/socket/close/csquiz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoEducationCloseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoQuizSocketRequest} cotatoQuizSocketRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denyQuiz: async (cotatoQuizSocketRequest: CotatoQuizSocketRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoQuizSocketRequest' is not null or undefined
            assertParamExists('denyQuiz', 'cotatoQuizSocketRequest', cotatoQuizSocketRequest)
            const localVarPath = `/v1/api/socket/deny`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoQuizSocketRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeSocketToken: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/api/socket/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoEducationOpenRequest} cotatoEducationOpenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openEducation: async (cotatoEducationOpenRequest: CotatoEducationOpenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoEducationOpenRequest' is not null or undefined
            assertParamExists('openEducation', 'cotatoEducationOpenRequest', cotatoEducationOpenRequest)
            const localVarPath = `/v1/api/socket/start/csquiz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoEducationOpenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendKingCommand: async (educationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'educationId' is not null or undefined
            assertParamExists('sendKingCommand', 'educationId', educationId)
            const localVarPath = `/v1/api/socket/kings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (educationId !== undefined) {
                localVarQueryParameter['educationId'] = educationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendWinnerCommand: async (educationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'educationId' is not null or undefined
            assertParamExists('sendWinnerCommand', 'educationId', educationId)
            const localVarPath = `/v1/api/socket/winner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (educationId !== undefined) {
                localVarQueryParameter['educationId'] = educationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoQuizSocketRequest} cotatoQuizSocketRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startQuizSolve: async (cotatoQuizSocketRequest: CotatoQuizSocketRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoQuizSocketRequest' is not null or undefined
            assertParamExists('startQuizSolve', 'cotatoQuizSocketRequest', cotatoQuizSocketRequest)
            const localVarPath = `/v1/api/socket/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoQuizSocketRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoQuizSocketRequest} cotatoQuizSocketRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopQuizSolve: async (cotatoQuizSocketRequest: CotatoQuizSocketRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoQuizSocketRequest' is not null or undefined
            assertParamExists('stopQuizSolve', 'cotatoQuizSocketRequest', cotatoQuizSocketRequest)
            const localVarPath = `/v1/api/socket/stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoQuizSocketRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SocketControllerApi - functional programming interface
 * @export
 */
export const SocketControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SocketControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CotatoQuizSocketRequest} cotatoQuizSocketRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessQuiz(cotatoQuizSocketRequest: CotatoQuizSocketRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accessQuiz(cotatoQuizSocketRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SocketControllerApi.accessQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoEducationCloseRequest} cotatoEducationCloseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async closeEducation(cotatoEducationCloseRequest: CotatoEducationCloseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.closeEducation(cotatoEducationCloseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SocketControllerApi.closeEducation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoQuizSocketRequest} cotatoQuizSocketRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async denyQuiz(cotatoQuizSocketRequest: CotatoQuizSocketRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.denyQuiz(cotatoQuizSocketRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SocketControllerApi.denyQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async makeSocketToken(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoSocketTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.makeSocketToken(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SocketControllerApi.makeSocketToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoEducationOpenRequest} cotatoEducationOpenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openEducation(cotatoEducationOpenRequest: CotatoEducationOpenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.openEducation(cotatoEducationOpenRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SocketControllerApi.openEducation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendKingCommand(educationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendKingCommand(educationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SocketControllerApi.sendKingCommand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendWinnerCommand(educationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendWinnerCommand(educationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SocketControllerApi.sendWinnerCommand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoQuizSocketRequest} cotatoQuizSocketRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startQuizSolve(cotatoQuizSocketRequest: CotatoQuizSocketRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startQuizSolve(cotatoQuizSocketRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SocketControllerApi.startQuizSolve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoQuizSocketRequest} cotatoQuizSocketRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopQuizSolve(cotatoQuizSocketRequest: CotatoQuizSocketRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopQuizSolve(cotatoQuizSocketRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SocketControllerApi.stopQuizSolve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SocketControllerApi - factory interface
 * @export
 */
export const SocketControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SocketControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {SocketControllerApiAccessQuizRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessQuiz(requestParameters: SocketControllerApiAccessQuizRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.accessQuiz(requestParameters.cotatoQuizSocketRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SocketControllerApiCloseEducationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeEducation(requestParameters: SocketControllerApiCloseEducationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.closeEducation(requestParameters.cotatoEducationCloseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SocketControllerApiDenyQuizRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denyQuiz(requestParameters: SocketControllerApiDenyQuizRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.denyQuiz(requestParameters.cotatoQuizSocketRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeSocketToken(options?: RawAxiosRequestConfig): AxiosPromise<CotatoSocketTokenDto> {
            return localVarFp.makeSocketToken(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SocketControllerApiOpenEducationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openEducation(requestParameters: SocketControllerApiOpenEducationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.openEducation(requestParameters.cotatoEducationOpenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SocketControllerApiSendKingCommandRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendKingCommand(requestParameters: SocketControllerApiSendKingCommandRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendKingCommand(requestParameters.educationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SocketControllerApiSendWinnerCommandRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendWinnerCommand(requestParameters: SocketControllerApiSendWinnerCommandRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendWinnerCommand(requestParameters.educationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SocketControllerApiStartQuizSolveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startQuizSolve(requestParameters: SocketControllerApiStartQuizSolveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.startQuizSolve(requestParameters.cotatoQuizSocketRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SocketControllerApiStopQuizSolveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopQuizSolve(requestParameters: SocketControllerApiStopQuizSolveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.stopQuizSolve(requestParameters.cotatoQuizSocketRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for accessQuiz operation in SocketControllerApi.
 * @export
 * @interface SocketControllerApiAccessQuizRequest
 */
export interface SocketControllerApiAccessQuizRequest {
    /**
     * 
     * @type {CotatoQuizSocketRequest}
     * @memberof SocketControllerApiAccessQuiz
     */
    readonly cotatoQuizSocketRequest: CotatoQuizSocketRequest
}

/**
 * Request parameters for closeEducation operation in SocketControllerApi.
 * @export
 * @interface SocketControllerApiCloseEducationRequest
 */
export interface SocketControllerApiCloseEducationRequest {
    /**
     * 
     * @type {CotatoEducationCloseRequest}
     * @memberof SocketControllerApiCloseEducation
     */
    readonly cotatoEducationCloseRequest: CotatoEducationCloseRequest
}

/**
 * Request parameters for denyQuiz operation in SocketControllerApi.
 * @export
 * @interface SocketControllerApiDenyQuizRequest
 */
export interface SocketControllerApiDenyQuizRequest {
    /**
     * 
     * @type {CotatoQuizSocketRequest}
     * @memberof SocketControllerApiDenyQuiz
     */
    readonly cotatoQuizSocketRequest: CotatoQuizSocketRequest
}

/**
 * Request parameters for openEducation operation in SocketControllerApi.
 * @export
 * @interface SocketControllerApiOpenEducationRequest
 */
export interface SocketControllerApiOpenEducationRequest {
    /**
     * 
     * @type {CotatoEducationOpenRequest}
     * @memberof SocketControllerApiOpenEducation
     */
    readonly cotatoEducationOpenRequest: CotatoEducationOpenRequest
}

/**
 * Request parameters for sendKingCommand operation in SocketControllerApi.
 * @export
 * @interface SocketControllerApiSendKingCommandRequest
 */
export interface SocketControllerApiSendKingCommandRequest {
    /**
     * 
     * @type {number}
     * @memberof SocketControllerApiSendKingCommand
     */
    readonly educationId: number
}

/**
 * Request parameters for sendWinnerCommand operation in SocketControllerApi.
 * @export
 * @interface SocketControllerApiSendWinnerCommandRequest
 */
export interface SocketControllerApiSendWinnerCommandRequest {
    /**
     * 
     * @type {number}
     * @memberof SocketControllerApiSendWinnerCommand
     */
    readonly educationId: number
}

/**
 * Request parameters for startQuizSolve operation in SocketControllerApi.
 * @export
 * @interface SocketControllerApiStartQuizSolveRequest
 */
export interface SocketControllerApiStartQuizSolveRequest {
    /**
     * 
     * @type {CotatoQuizSocketRequest}
     * @memberof SocketControllerApiStartQuizSolve
     */
    readonly cotatoQuizSocketRequest: CotatoQuizSocketRequest
}

/**
 * Request parameters for stopQuizSolve operation in SocketControllerApi.
 * @export
 * @interface SocketControllerApiStopQuizSolveRequest
 */
export interface SocketControllerApiStopQuizSolveRequest {
    /**
     * 
     * @type {CotatoQuizSocketRequest}
     * @memberof SocketControllerApiStopQuizSolve
     */
    readonly cotatoQuizSocketRequest: CotatoQuizSocketRequest
}

/**
 * SocketControllerApi - object-oriented interface
 * @export
 * @class SocketControllerApi
 * @extends {BaseAPI}
 */
export class SocketControllerApi extends BaseAPI {
    /**
     * 
     * @param {SocketControllerApiAccessQuizRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocketControllerApi
     */
    public accessQuiz(requestParameters: SocketControllerApiAccessQuizRequest, options?: RawAxiosRequestConfig) {
        return SocketControllerApiFp(this.configuration).accessQuiz(requestParameters.cotatoQuizSocketRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SocketControllerApiCloseEducationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocketControllerApi
     */
    public closeEducation(requestParameters: SocketControllerApiCloseEducationRequest, options?: RawAxiosRequestConfig) {
        return SocketControllerApiFp(this.configuration).closeEducation(requestParameters.cotatoEducationCloseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SocketControllerApiDenyQuizRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocketControllerApi
     */
    public denyQuiz(requestParameters: SocketControllerApiDenyQuizRequest, options?: RawAxiosRequestConfig) {
        return SocketControllerApiFp(this.configuration).denyQuiz(requestParameters.cotatoQuizSocketRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocketControllerApi
     */
    public makeSocketToken(options?: RawAxiosRequestConfig) {
        return SocketControllerApiFp(this.configuration).makeSocketToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SocketControllerApiOpenEducationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocketControllerApi
     */
    public openEducation(requestParameters: SocketControllerApiOpenEducationRequest, options?: RawAxiosRequestConfig) {
        return SocketControllerApiFp(this.configuration).openEducation(requestParameters.cotatoEducationOpenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SocketControllerApiSendKingCommandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocketControllerApi
     */
    public sendKingCommand(requestParameters: SocketControllerApiSendKingCommandRequest, options?: RawAxiosRequestConfig) {
        return SocketControllerApiFp(this.configuration).sendKingCommand(requestParameters.educationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SocketControllerApiSendWinnerCommandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocketControllerApi
     */
    public sendWinnerCommand(requestParameters: SocketControllerApiSendWinnerCommandRequest, options?: RawAxiosRequestConfig) {
        return SocketControllerApiFp(this.configuration).sendWinnerCommand(requestParameters.educationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SocketControllerApiStartQuizSolveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocketControllerApi
     */
    public startQuizSolve(requestParameters: SocketControllerApiStartQuizSolveRequest, options?: RawAxiosRequestConfig) {
        return SocketControllerApiFp(this.configuration).startQuizSolve(requestParameters.cotatoQuizSocketRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SocketControllerApiStopQuizSolveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocketControllerApi
     */
    public stopQuizSolve(requestParameters: SocketControllerApiStopQuizSolveRequest, options?: RawAxiosRequestConfig) {
        return SocketControllerApiFp(this.configuration).stopQuizSolve(requestParameters.cotatoQuizSocketRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

