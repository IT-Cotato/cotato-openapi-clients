/* tslint:disable */
/* eslint-disable */
/**
 * CS-QUIZ 프로젝트 API 명세서
 * quiz api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CotatoAddGenerationRequest } from '../model';
// @ts-ignore
import type { CotatoAddGenerationResponse } from '../model';
// @ts-ignore
import type { CotatoChangeGenerationPeriodRequest } from '../model';
// @ts-ignore
import type { CotatoChangeRecruitingStatusRequest } from '../model';
// @ts-ignore
import type { CotatoGenerationInfoResponse } from '../model';
/**
 * GenerationControllerApi - axios parameter creator
 * @export
 */
export const GenerationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CotatoAddGenerationRequest} cotatoAddGenerationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGeneration: async (cotatoAddGenerationRequest: CotatoAddGenerationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoAddGenerationRequest' is not null or undefined
            assertParamExists('addGeneration', 'cotatoAddGenerationRequest', cotatoAddGenerationRequest)
            const localVarPath = `/v1/api/generation/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoAddGenerationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoChangeGenerationPeriodRequest} cotatoChangeGenerationPeriodRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeGenerationPeriod: async (cotatoChangeGenerationPeriodRequest: CotatoChangeGenerationPeriodRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoChangeGenerationPeriodRequest' is not null or undefined
            assertParamExists('changeGenerationPeriod', 'cotatoChangeGenerationPeriodRequest', cotatoChangeGenerationPeriodRequest)
            const localVarPath = `/v1/api/generation/period`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoChangeGenerationPeriodRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoChangeRecruitingStatusRequest} cotatoChangeRecruitingStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeRecruitingStatus: async (cotatoChangeRecruitingStatusRequest: CotatoChangeRecruitingStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoChangeRecruitingStatusRequest' is not null or undefined
            assertParamExists('changeRecruitingStatus', 'cotatoChangeRecruitingStatusRequest', cotatoChangeRecruitingStatusRequest)
            const localVarPath = `/v1/api/generation/recruiting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoChangeRecruitingStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findGenerations: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/api/generation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GenerationControllerApi - functional programming interface
 * @export
 */
export const GenerationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GenerationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CotatoAddGenerationRequest} cotatoAddGenerationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addGeneration(cotatoAddGenerationRequest: CotatoAddGenerationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoAddGenerationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addGeneration(cotatoAddGenerationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GenerationControllerApi.addGeneration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoChangeGenerationPeriodRequest} cotatoChangeGenerationPeriodRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeGenerationPeriod(cotatoChangeGenerationPeriodRequest: CotatoChangeGenerationPeriodRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeGenerationPeriod(cotatoChangeGenerationPeriodRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GenerationControllerApi.changeGenerationPeriod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoChangeRecruitingStatusRequest} cotatoChangeRecruitingStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeRecruitingStatus(cotatoChangeRecruitingStatusRequest: CotatoChangeRecruitingStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeRecruitingStatus(cotatoChangeRecruitingStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GenerationControllerApi.changeRecruitingStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findGenerations(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CotatoGenerationInfoResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findGenerations(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GenerationControllerApi.findGenerations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GenerationControllerApi - factory interface
 * @export
 */
export const GenerationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GenerationControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CotatoAddGenerationRequest} cotatoAddGenerationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGeneration(cotatoAddGenerationRequest: CotatoAddGenerationRequest, options?: any): AxiosPromise<CotatoAddGenerationResponse> {
            return localVarFp.addGeneration(cotatoAddGenerationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CotatoChangeGenerationPeriodRequest} cotatoChangeGenerationPeriodRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeGenerationPeriod(cotatoChangeGenerationPeriodRequest: CotatoChangeGenerationPeriodRequest, options?: any): AxiosPromise<void> {
            return localVarFp.changeGenerationPeriod(cotatoChangeGenerationPeriodRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CotatoChangeRecruitingStatusRequest} cotatoChangeRecruitingStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeRecruitingStatus(cotatoChangeRecruitingStatusRequest: CotatoChangeRecruitingStatusRequest, options?: any): AxiosPromise<void> {
            return localVarFp.changeRecruitingStatus(cotatoChangeRecruitingStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findGenerations(options?: any): AxiosPromise<Array<CotatoGenerationInfoResponse>> {
            return localVarFp.findGenerations(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GenerationControllerApi - object-oriented interface
 * @export
 * @class GenerationControllerApi
 * @extends {BaseAPI}
 */
export class GenerationControllerApi extends BaseAPI {
    /**
     * 
     * @param {CotatoAddGenerationRequest} cotatoAddGenerationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenerationControllerApi
     */
    public addGeneration(cotatoAddGenerationRequest: CotatoAddGenerationRequest, options?: RawAxiosRequestConfig) {
        return GenerationControllerApiFp(this.configuration).addGeneration(cotatoAddGenerationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CotatoChangeGenerationPeriodRequest} cotatoChangeGenerationPeriodRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenerationControllerApi
     */
    public changeGenerationPeriod(cotatoChangeGenerationPeriodRequest: CotatoChangeGenerationPeriodRequest, options?: RawAxiosRequestConfig) {
        return GenerationControllerApiFp(this.configuration).changeGenerationPeriod(cotatoChangeGenerationPeriodRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CotatoChangeRecruitingStatusRequest} cotatoChangeRecruitingStatusRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenerationControllerApi
     */
    public changeRecruitingStatus(cotatoChangeRecruitingStatusRequest: CotatoChangeRecruitingStatusRequest, options?: RawAxiosRequestConfig) {
        return GenerationControllerApiFp(this.configuration).changeRecruitingStatus(cotatoChangeRecruitingStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenerationControllerApi
     */
    public findGenerations(options?: RawAxiosRequestConfig) {
        return GenerationControllerApiFp(this.configuration).findGenerations(options).then((request) => request(this.axios, this.basePath));
    }
}

