/* tslint:disable */
/* eslint-disable */
/**
 * CS-QUIZ 프로젝트 API 명세서
 * quiz api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CotatoAddAdditionalAnswerRequest } from '../model';
// @ts-ignore
import type { CotatoAllQuizzesInCsQuizResponse } from '../model';
// @ts-ignore
import type { CotatoAllQuizzesResponse } from '../model';
// @ts-ignore
import type { CotatoCreateMultipleQuizRequest } from '../model';
// @ts-ignore
import type { CotatoCreateShortQuizRequest } from '../model';
// @ts-ignore
import type { CotatoQuizInfoInCsQuizResponse } from '../model';
// @ts-ignore
import type { CotatoQuizResponse } from '../model';
// @ts-ignore
import type { CotatoQuizResultInfo } from '../model';
/**
 * QuizControllerApi - axios parameter creator
 * @export
 */
export const QuizControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CotatoAddAdditionalAnswerRequest} cotatoAddAdditionalAnswerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdditionalAnswer: async (cotatoAddAdditionalAnswerRequest: CotatoAddAdditionalAnswerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoAddAdditionalAnswerRequest' is not null or undefined
            assertParamExists('addAdditionalAnswer', 'cotatoAddAdditionalAnswerRequest', cotatoAddAdditionalAnswerRequest)
            const localVarPath = `/v1/api/quiz/cs-admin/answer/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoAddAdditionalAnswerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} educationId 
         * @param {Array<CotatoCreateMultipleQuizRequest>} [multiples] 
         * @param {Array<CotatoCreateShortQuizRequest>} [shortQuizzes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAllQuizzes: async (educationId: number, multiples?: Array<CotatoCreateMultipleQuizRequest>, shortQuizzes?: Array<CotatoCreateShortQuizRequest>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'educationId' is not null or undefined
            assertParamExists('addAllQuizzes', 'educationId', educationId)
            const localVarPath = `/v1/api/quiz/adds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (educationId !== undefined) {
                localVarQueryParameter['educationId'] = educationId;
            }

            if (multiples) {
                localVarFormParams.append('multiples', multiples.join(COLLECTION_FORMATS.csv));
            }

                if (shortQuizzes) {
                localVarFormParams.append('shortQuizzes', shortQuizzes.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllQuizzesForAdminCsQuiz: async (educationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'educationId' is not null or undefined
            assertParamExists('findAllQuizzesForAdminCsQuiz', 'educationId', educationId)
            const localVarPath = `/v1/api/quiz/cs-admin/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (educationId !== undefined) {
                localVarQueryParameter['educationId'] = educationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllQuizzesForEducationTeam: async (educationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'educationId' is not null or undefined
            assertParamExists('findAllQuizzesForEducationTeam', 'educationId', educationId)
            const localVarPath = `/v1/api/quiz/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (educationId !== undefined) {
                localVarQueryParameter['educationId'] = educationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneQuizForMember: async (quizId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('findOneQuizForMember', 'quizId', quizId)
            const localVarPath = `/v1/api/quiz/{quizId}`
                .replace(`{${"quizId"}}`, encodeURIComponent(String(quizId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findQuizForAdminCsQuiz: async (quizId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('findQuizForAdminCsQuiz', 'quizId', quizId)
            const localVarPath = `/v1/api/quiz/cs-admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (quizId !== undefined) {
                localVarQueryParameter['quizId'] = quizId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizResults: async (educationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'educationId' is not null or undefined
            assertParamExists('quizResults', 'educationId', educationId)
            const localVarPath = `/v1/api/quiz/cs-admin/results`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (educationId !== undefined) {
                localVarQueryParameter['educationId'] = educationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuizControllerApi - functional programming interface
 * @export
 */
export const QuizControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuizControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CotatoAddAdditionalAnswerRequest} cotatoAddAdditionalAnswerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAdditionalAnswer(cotatoAddAdditionalAnswerRequest: CotatoAddAdditionalAnswerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAdditionalAnswer(cotatoAddAdditionalAnswerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizControllerApi.addAdditionalAnswer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} educationId 
         * @param {Array<CotatoCreateMultipleQuizRequest>} [multiples] 
         * @param {Array<CotatoCreateShortQuizRequest>} [shortQuizzes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAllQuizzes(educationId: number, multiples?: Array<CotatoCreateMultipleQuizRequest>, shortQuizzes?: Array<CotatoCreateShortQuizRequest>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAllQuizzes(educationId, multiples, shortQuizzes, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizControllerApi.addAllQuizzes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllQuizzesForAdminCsQuiz(educationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoAllQuizzesInCsQuizResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllQuizzesForAdminCsQuiz(educationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizControllerApi.findAllQuizzesForAdminCsQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllQuizzesForEducationTeam(educationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoAllQuizzesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllQuizzesForEducationTeam(educationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizControllerApi.findAllQuizzesForEducationTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOneQuizForMember(quizId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoQuizResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOneQuizForMember(quizId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizControllerApi.findOneQuizForMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findQuizForAdminCsQuiz(quizId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoQuizInfoInCsQuizResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findQuizForAdminCsQuiz(quizId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizControllerApi.findQuizForAdminCsQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quizResults(educationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CotatoQuizResultInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quizResults(educationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizControllerApi.quizResults']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuizControllerApi - factory interface
 * @export
 */
export const QuizControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuizControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {QuizControllerApiAddAdditionalAnswerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdditionalAnswer(requestParameters: QuizControllerApiAddAdditionalAnswerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addAdditionalAnswer(requestParameters.cotatoAddAdditionalAnswerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QuizControllerApiAddAllQuizzesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAllQuizzes(requestParameters: QuizControllerApiAddAllQuizzesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addAllQuizzes(requestParameters.educationId, requestParameters.multiples, requestParameters.shortQuizzes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QuizControllerApiFindAllQuizzesForAdminCsQuizRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllQuizzesForAdminCsQuiz(requestParameters: QuizControllerApiFindAllQuizzesForAdminCsQuizRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoAllQuizzesInCsQuizResponse> {
            return localVarFp.findAllQuizzesForAdminCsQuiz(requestParameters.educationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QuizControllerApiFindAllQuizzesForEducationTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllQuizzesForEducationTeam(requestParameters: QuizControllerApiFindAllQuizzesForEducationTeamRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoAllQuizzesResponse> {
            return localVarFp.findAllQuizzesForEducationTeam(requestParameters.educationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QuizControllerApiFindOneQuizForMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneQuizForMember(requestParameters: QuizControllerApiFindOneQuizForMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoQuizResponse> {
            return localVarFp.findOneQuizForMember(requestParameters.quizId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QuizControllerApiFindQuizForAdminCsQuizRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findQuizForAdminCsQuiz(requestParameters: QuizControllerApiFindQuizForAdminCsQuizRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoQuizInfoInCsQuizResponse> {
            return localVarFp.findQuizForAdminCsQuiz(requestParameters.quizId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QuizControllerApiQuizResultsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizResults(requestParameters: QuizControllerApiQuizResultsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<CotatoQuizResultInfo>> {
            return localVarFp.quizResults(requestParameters.educationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAdditionalAnswer operation in QuizControllerApi.
 * @export
 * @interface QuizControllerApiAddAdditionalAnswerRequest
 */
export interface QuizControllerApiAddAdditionalAnswerRequest {
    /**
     * 
     * @type {CotatoAddAdditionalAnswerRequest}
     * @memberof QuizControllerApiAddAdditionalAnswer
     */
    readonly cotatoAddAdditionalAnswerRequest: CotatoAddAdditionalAnswerRequest
}

/**
 * Request parameters for addAllQuizzes operation in QuizControllerApi.
 * @export
 * @interface QuizControllerApiAddAllQuizzesRequest
 */
export interface QuizControllerApiAddAllQuizzesRequest {
    /**
     * 
     * @type {number}
     * @memberof QuizControllerApiAddAllQuizzes
     */
    readonly educationId: number

    /**
     * 
     * @type {Array<CotatoCreateMultipleQuizRequest>}
     * @memberof QuizControllerApiAddAllQuizzes
     */
    readonly multiples?: Array<CotatoCreateMultipleQuizRequest>

    /**
     * 
     * @type {Array<CotatoCreateShortQuizRequest>}
     * @memberof QuizControllerApiAddAllQuizzes
     */
    readonly shortQuizzes?: Array<CotatoCreateShortQuizRequest>
}

/**
 * Request parameters for findAllQuizzesForAdminCsQuiz operation in QuizControllerApi.
 * @export
 * @interface QuizControllerApiFindAllQuizzesForAdminCsQuizRequest
 */
export interface QuizControllerApiFindAllQuizzesForAdminCsQuizRequest {
    /**
     * 
     * @type {number}
     * @memberof QuizControllerApiFindAllQuizzesForAdminCsQuiz
     */
    readonly educationId: number
}

/**
 * Request parameters for findAllQuizzesForEducationTeam operation in QuizControllerApi.
 * @export
 * @interface QuizControllerApiFindAllQuizzesForEducationTeamRequest
 */
export interface QuizControllerApiFindAllQuizzesForEducationTeamRequest {
    /**
     * 
     * @type {number}
     * @memberof QuizControllerApiFindAllQuizzesForEducationTeam
     */
    readonly educationId: number
}

/**
 * Request parameters for findOneQuizForMember operation in QuizControllerApi.
 * @export
 * @interface QuizControllerApiFindOneQuizForMemberRequest
 */
export interface QuizControllerApiFindOneQuizForMemberRequest {
    /**
     * 
     * @type {number}
     * @memberof QuizControllerApiFindOneQuizForMember
     */
    readonly quizId: number
}

/**
 * Request parameters for findQuizForAdminCsQuiz operation in QuizControllerApi.
 * @export
 * @interface QuizControllerApiFindQuizForAdminCsQuizRequest
 */
export interface QuizControllerApiFindQuizForAdminCsQuizRequest {
    /**
     * 
     * @type {number}
     * @memberof QuizControllerApiFindQuizForAdminCsQuiz
     */
    readonly quizId: number
}

/**
 * Request parameters for quizResults operation in QuizControllerApi.
 * @export
 * @interface QuizControllerApiQuizResultsRequest
 */
export interface QuizControllerApiQuizResultsRequest {
    /**
     * 
     * @type {number}
     * @memberof QuizControllerApiQuizResults
     */
    readonly educationId: number
}

/**
 * QuizControllerApi - object-oriented interface
 * @export
 * @class QuizControllerApi
 * @extends {BaseAPI}
 */
export class QuizControllerApi extends BaseAPI {
    /**
     * 
     * @param {QuizControllerApiAddAdditionalAnswerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizControllerApi
     */
    public addAdditionalAnswer(requestParameters: QuizControllerApiAddAdditionalAnswerRequest, options?: RawAxiosRequestConfig) {
        return QuizControllerApiFp(this.configuration).addAdditionalAnswer(requestParameters.cotatoAddAdditionalAnswerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QuizControllerApiAddAllQuizzesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizControllerApi
     */
    public addAllQuizzes(requestParameters: QuizControllerApiAddAllQuizzesRequest, options?: RawAxiosRequestConfig) {
        return QuizControllerApiFp(this.configuration).addAllQuizzes(requestParameters.educationId, requestParameters.multiples, requestParameters.shortQuizzes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QuizControllerApiFindAllQuizzesForAdminCsQuizRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizControllerApi
     */
    public findAllQuizzesForAdminCsQuiz(requestParameters: QuizControllerApiFindAllQuizzesForAdminCsQuizRequest, options?: RawAxiosRequestConfig) {
        return QuizControllerApiFp(this.configuration).findAllQuizzesForAdminCsQuiz(requestParameters.educationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QuizControllerApiFindAllQuizzesForEducationTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizControllerApi
     */
    public findAllQuizzesForEducationTeam(requestParameters: QuizControllerApiFindAllQuizzesForEducationTeamRequest, options?: RawAxiosRequestConfig) {
        return QuizControllerApiFp(this.configuration).findAllQuizzesForEducationTeam(requestParameters.educationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QuizControllerApiFindOneQuizForMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizControllerApi
     */
    public findOneQuizForMember(requestParameters: QuizControllerApiFindOneQuizForMemberRequest, options?: RawAxiosRequestConfig) {
        return QuizControllerApiFp(this.configuration).findOneQuizForMember(requestParameters.quizId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QuizControllerApiFindQuizForAdminCsQuizRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizControllerApi
     */
    public findQuizForAdminCsQuiz(requestParameters: QuizControllerApiFindQuizForAdminCsQuizRequest, options?: RawAxiosRequestConfig) {
        return QuizControllerApiFp(this.configuration).findQuizForAdminCsQuiz(requestParameters.quizId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QuizControllerApiQuizResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizControllerApi
     */
    public quizResults(requestParameters: QuizControllerApiQuizResultsRequest, options?: RawAxiosRequestConfig) {
        return QuizControllerApiFp(this.configuration).quizResults(requestParameters.educationId, options).then((request) => request(this.axios, this.basePath));
    }
}

