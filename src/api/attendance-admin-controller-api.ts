/* tslint:disable */
/* eslint-disable */
/**
 * CS-QUIZ 프로젝트 API 명세서
 * quiz api 명세서
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { CotatoUpdateAttendanceRequest } from "../model";
/**
 * AttendanceAdminControllerApi - axios parameter creator
 * @export
 */
export const AttendanceAdminControllerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 출석 정보 변경 API
     * @param {CotatoUpdateAttendanceRequest} cotatoUpdateAttendanceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAttendance1: async (
      cotatoUpdateAttendanceRequest: CotatoUpdateAttendanceRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'cotatoUpdateAttendanceRequest' is not null or undefined
      assertParamExists(
        "updateAttendance1",
        "cotatoUpdateAttendanceRequest",
        cotatoUpdateAttendanceRequest
      );
      const localVarPath = `/v2/api/attendances/admin`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        cotatoUpdateAttendanceRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AttendanceAdminControllerApi - functional programming interface
 * @export
 */
export const AttendanceAdminControllerApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    AttendanceAdminControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 출석 정보 변경 API
     * @param {CotatoUpdateAttendanceRequest} cotatoUpdateAttendanceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateAttendance1(
      cotatoUpdateAttendanceRequest: CotatoUpdateAttendanceRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateAttendance1(
          cotatoUpdateAttendanceRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AttendanceAdminControllerApi.updateAttendance1"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AttendanceAdminControllerApi - factory interface
 * @export
 */
export const AttendanceAdminControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AttendanceAdminControllerApiFp(configuration);
  return {
    /**
     *
     * @summary 출석 정보 변경 API
     * @param {AttendanceAdminControllerApiUpdateAttendance1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAttendance1(
      requestParameters: AttendanceAdminControllerApiUpdateAttendance1Request,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .updateAttendance1(
          requestParameters.cotatoUpdateAttendanceRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for updateAttendance1 operation in AttendanceAdminControllerApi.
 * @export
 * @interface AttendanceAdminControllerApiUpdateAttendance1Request
 */
export interface AttendanceAdminControllerApiUpdateAttendance1Request {
  /**
   *
   * @type {CotatoUpdateAttendanceRequest}
   * @memberof AttendanceAdminControllerApiUpdateAttendance1
   */
  readonly cotatoUpdateAttendanceRequest: CotatoUpdateAttendanceRequest;
}

/**
 * AttendanceAdminControllerApi - object-oriented interface
 * @export
 * @class AttendanceAdminControllerApi
 * @extends {BaseAPI}
 */
export class AttendanceAdminControllerApi extends BaseAPI {
  /**
   *
   * @summary 출석 정보 변경 API
   * @param {AttendanceAdminControllerApiUpdateAttendance1Request} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttendanceAdminControllerApi
   */
  public updateAttendance1(
    requestParameters: AttendanceAdminControllerApiUpdateAttendance1Request,
    options?: RawAxiosRequestConfig
  ) {
    return AttendanceAdminControllerApiFp(this.configuration)
      .updateAttendance1(
        requestParameters.cotatoUpdateAttendanceRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
