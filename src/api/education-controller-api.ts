/* tslint:disable */
/* eslint-disable */
/**
 * CS-QUIZ 프로젝트 API 명세서
 * quiz api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CotatoAllEducationResponse } from '../model';
// @ts-ignore
import type { CotatoCreateEducationRequest } from '../model';
// @ts-ignore
import type { CotatoCreateEducationResponse } from '../model';
// @ts-ignore
import type { CotatoEducationIdOfQuizResponse } from '../model';
// @ts-ignore
import type { CotatoFindEducationStatusResponse } from '../model';
// @ts-ignore
import type { CotatoKingMemberInfo } from '../model';
// @ts-ignore
import type { CotatoUpdateEducationRequest } from '../model';
// @ts-ignore
import type { CotatoWinnerInfoResponse } from '../model';
/**
 * EducationControllerApi - axios parameter creator
 * @export
 */
export const EducationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateKingMembers: async (educationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'educationId' is not null or undefined
            assertParamExists('calculateKingMembers', 'educationId', educationId)
            const localVarPath = `/v1/api/education/kings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (educationId !== undefined) {
                localVarQueryParameter['educationId'] = educationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateWinner: async (educationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'educationId' is not null or undefined
            assertParamExists('calculateWinner', 'educationId', educationId)
            const localVarPath = `/v1/api/education/winner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (educationId !== undefined) {
                localVarQueryParameter['educationId'] = educationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoCreateEducationRequest} cotatoCreateEducationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEducation: async (cotatoCreateEducationRequest: CotatoCreateEducationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoCreateEducationRequest' is not null or undefined
            assertParamExists('createEducation', 'cotatoCreateEducationRequest', cotatoCreateEducationRequest)
            const localVarPath = `/v1/api/education/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoCreateEducationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEducationId: async (quizId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('findEducationId', 'quizId', quizId)
            const localVarPath = `/v1/api/education/from`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (quizId !== undefined) {
                localVarQueryParameter['quizId'] = quizId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} generationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEducationListByGeneration: async (generationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'generationId' is not null or undefined
            assertParamExists('findEducationListByGeneration', 'generationId', generationId)
            const localVarPath = `/v1/api/education`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (generationId !== undefined) {
                localVarQueryParameter['generationId'] = generationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEducationStatus: async (educationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'educationId' is not null or undefined
            assertParamExists('findEducationStatus', 'educationId', educationId)
            const localVarPath = `/v1/api/education/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (educationId !== undefined) {
                localVarQueryParameter['educationId'] = educationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFinalKingMembers: async (educationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'educationId' is not null or undefined
            assertParamExists('findFinalKingMembers', 'educationId', educationId)
            const localVarPath = `/v1/api/education/kings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (educationId !== undefined) {
                localVarQueryParameter['educationId'] = educationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findWinner: async (educationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'educationId' is not null or undefined
            assertParamExists('findWinner', 'educationId', educationId)
            const localVarPath = `/v1/api/education/winner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (educationId !== undefined) {
                localVarQueryParameter['educationId'] = educationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoUpdateEducationRequest} cotatoUpdateEducationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEducation: async (cotatoUpdateEducationRequest: CotatoUpdateEducationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoUpdateEducationRequest' is not null or undefined
            assertParamExists('updateEducation', 'cotatoUpdateEducationRequest', cotatoUpdateEducationRequest)
            const localVarPath = `/v1/api/education/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoUpdateEducationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EducationControllerApi - functional programming interface
 * @export
 */
export const EducationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EducationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculateKingMembers(educationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.calculateKingMembers(educationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EducationControllerApi.calculateKingMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculateWinner(educationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.calculateWinner(educationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EducationControllerApi.calculateWinner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoCreateEducationRequest} cotatoCreateEducationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEducation(cotatoCreateEducationRequest: CotatoCreateEducationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoCreateEducationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEducation(cotatoCreateEducationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EducationControllerApi.createEducation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findEducationId(quizId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoEducationIdOfQuizResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findEducationId(quizId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EducationControllerApi.findEducationId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} generationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findEducationListByGeneration(generationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CotatoAllEducationResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findEducationListByGeneration(generationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EducationControllerApi.findEducationListByGeneration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findEducationStatus(educationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoFindEducationStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findEducationStatus(educationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EducationControllerApi.findEducationStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findFinalKingMembers(educationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CotatoKingMemberInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findFinalKingMembers(educationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EducationControllerApi.findFinalKingMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} educationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findWinner(educationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoWinnerInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findWinner(educationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EducationControllerApi.findWinner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoUpdateEducationRequest} cotatoUpdateEducationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEducation(cotatoUpdateEducationRequest: CotatoUpdateEducationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEducation(cotatoUpdateEducationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EducationControllerApi.updateEducation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EducationControllerApi - factory interface
 * @export
 */
export const EducationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EducationControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {EducationControllerApiCalculateKingMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateKingMembers(requestParameters: EducationControllerApiCalculateKingMembersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.calculateKingMembers(requestParameters.educationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EducationControllerApiCalculateWinnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateWinner(requestParameters: EducationControllerApiCalculateWinnerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.calculateWinner(requestParameters.educationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EducationControllerApiCreateEducationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEducation(requestParameters: EducationControllerApiCreateEducationRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoCreateEducationResponse> {
            return localVarFp.createEducation(requestParameters.cotatoCreateEducationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EducationControllerApiFindEducationIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEducationId(requestParameters: EducationControllerApiFindEducationIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoEducationIdOfQuizResponse> {
            return localVarFp.findEducationId(requestParameters.quizId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EducationControllerApiFindEducationListByGenerationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEducationListByGeneration(requestParameters: EducationControllerApiFindEducationListByGenerationRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<CotatoAllEducationResponse>> {
            return localVarFp.findEducationListByGeneration(requestParameters.generationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EducationControllerApiFindEducationStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEducationStatus(requestParameters: EducationControllerApiFindEducationStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoFindEducationStatusResponse> {
            return localVarFp.findEducationStatus(requestParameters.educationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EducationControllerApiFindFinalKingMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFinalKingMembers(requestParameters: EducationControllerApiFindFinalKingMembersRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<CotatoKingMemberInfo>> {
            return localVarFp.findFinalKingMembers(requestParameters.educationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EducationControllerApiFindWinnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findWinner(requestParameters: EducationControllerApiFindWinnerRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoWinnerInfoResponse> {
            return localVarFp.findWinner(requestParameters.educationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EducationControllerApiUpdateEducationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEducation(requestParameters: EducationControllerApiUpdateEducationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateEducation(requestParameters.cotatoUpdateEducationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for calculateKingMembers operation in EducationControllerApi.
 * @export
 * @interface EducationControllerApiCalculateKingMembersRequest
 */
export interface EducationControllerApiCalculateKingMembersRequest {
    /**
     * 
     * @type {number}
     * @memberof EducationControllerApiCalculateKingMembers
     */
    readonly educationId: number
}

/**
 * Request parameters for calculateWinner operation in EducationControllerApi.
 * @export
 * @interface EducationControllerApiCalculateWinnerRequest
 */
export interface EducationControllerApiCalculateWinnerRequest {
    /**
     * 
     * @type {number}
     * @memberof EducationControllerApiCalculateWinner
     */
    readonly educationId: number
}

/**
 * Request parameters for createEducation operation in EducationControllerApi.
 * @export
 * @interface EducationControllerApiCreateEducationRequest
 */
export interface EducationControllerApiCreateEducationRequest {
    /**
     * 
     * @type {CotatoCreateEducationRequest}
     * @memberof EducationControllerApiCreateEducation
     */
    readonly cotatoCreateEducationRequest: CotatoCreateEducationRequest
}

/**
 * Request parameters for findEducationId operation in EducationControllerApi.
 * @export
 * @interface EducationControllerApiFindEducationIdRequest
 */
export interface EducationControllerApiFindEducationIdRequest {
    /**
     * 
     * @type {number}
     * @memberof EducationControllerApiFindEducationId
     */
    readonly quizId: number
}

/**
 * Request parameters for findEducationListByGeneration operation in EducationControllerApi.
 * @export
 * @interface EducationControllerApiFindEducationListByGenerationRequest
 */
export interface EducationControllerApiFindEducationListByGenerationRequest {
    /**
     * 
     * @type {number}
     * @memberof EducationControllerApiFindEducationListByGeneration
     */
    readonly generationId: number
}

/**
 * Request parameters for findEducationStatus operation in EducationControllerApi.
 * @export
 * @interface EducationControllerApiFindEducationStatusRequest
 */
export interface EducationControllerApiFindEducationStatusRequest {
    /**
     * 
     * @type {number}
     * @memberof EducationControllerApiFindEducationStatus
     */
    readonly educationId: number
}

/**
 * Request parameters for findFinalKingMembers operation in EducationControllerApi.
 * @export
 * @interface EducationControllerApiFindFinalKingMembersRequest
 */
export interface EducationControllerApiFindFinalKingMembersRequest {
    /**
     * 
     * @type {number}
     * @memberof EducationControllerApiFindFinalKingMembers
     */
    readonly educationId: number
}

/**
 * Request parameters for findWinner operation in EducationControllerApi.
 * @export
 * @interface EducationControllerApiFindWinnerRequest
 */
export interface EducationControllerApiFindWinnerRequest {
    /**
     * 
     * @type {number}
     * @memberof EducationControllerApiFindWinner
     */
    readonly educationId: number
}

/**
 * Request parameters for updateEducation operation in EducationControllerApi.
 * @export
 * @interface EducationControllerApiUpdateEducationRequest
 */
export interface EducationControllerApiUpdateEducationRequest {
    /**
     * 
     * @type {CotatoUpdateEducationRequest}
     * @memberof EducationControllerApiUpdateEducation
     */
    readonly cotatoUpdateEducationRequest: CotatoUpdateEducationRequest
}

/**
 * EducationControllerApi - object-oriented interface
 * @export
 * @class EducationControllerApi
 * @extends {BaseAPI}
 */
export class EducationControllerApi extends BaseAPI {
    /**
     * 
     * @param {EducationControllerApiCalculateKingMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationControllerApi
     */
    public calculateKingMembers(requestParameters: EducationControllerApiCalculateKingMembersRequest, options?: RawAxiosRequestConfig) {
        return EducationControllerApiFp(this.configuration).calculateKingMembers(requestParameters.educationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EducationControllerApiCalculateWinnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationControllerApi
     */
    public calculateWinner(requestParameters: EducationControllerApiCalculateWinnerRequest, options?: RawAxiosRequestConfig) {
        return EducationControllerApiFp(this.configuration).calculateWinner(requestParameters.educationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EducationControllerApiCreateEducationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationControllerApi
     */
    public createEducation(requestParameters: EducationControllerApiCreateEducationRequest, options?: RawAxiosRequestConfig) {
        return EducationControllerApiFp(this.configuration).createEducation(requestParameters.cotatoCreateEducationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EducationControllerApiFindEducationIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationControllerApi
     */
    public findEducationId(requestParameters: EducationControllerApiFindEducationIdRequest, options?: RawAxiosRequestConfig) {
        return EducationControllerApiFp(this.configuration).findEducationId(requestParameters.quizId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EducationControllerApiFindEducationListByGenerationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationControllerApi
     */
    public findEducationListByGeneration(requestParameters: EducationControllerApiFindEducationListByGenerationRequest, options?: RawAxiosRequestConfig) {
        return EducationControllerApiFp(this.configuration).findEducationListByGeneration(requestParameters.generationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EducationControllerApiFindEducationStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationControllerApi
     */
    public findEducationStatus(requestParameters: EducationControllerApiFindEducationStatusRequest, options?: RawAxiosRequestConfig) {
        return EducationControllerApiFp(this.configuration).findEducationStatus(requestParameters.educationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EducationControllerApiFindFinalKingMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationControllerApi
     */
    public findFinalKingMembers(requestParameters: EducationControllerApiFindFinalKingMembersRequest, options?: RawAxiosRequestConfig) {
        return EducationControllerApiFp(this.configuration).findFinalKingMembers(requestParameters.educationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EducationControllerApiFindWinnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationControllerApi
     */
    public findWinner(requestParameters: EducationControllerApiFindWinnerRequest, options?: RawAxiosRequestConfig) {
        return EducationControllerApiFp(this.configuration).findWinner(requestParameters.educationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EducationControllerApiUpdateEducationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationControllerApi
     */
    public updateEducation(requestParameters: EducationControllerApiUpdateEducationRequest, options?: RawAxiosRequestConfig) {
        return EducationControllerApiFp(this.configuration).updateEducation(requestParameters.cotatoUpdateEducationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

