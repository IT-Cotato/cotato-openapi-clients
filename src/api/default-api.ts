/* tslint:disable */
/* eslint-disable */
/**
 * CS-QUIZ 프로젝트 API 명세서
 * quiz api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CotatoAddSessionImageResponse } from '../model';
// @ts-ignore
import type { CotatoAddSessionResponse } from '../model';
// @ts-ignore
import type { CotatoAttendResponse } from '../model';
// @ts-ignore
import type { CotatoAttendanceRecordResponse } from '../model';
// @ts-ignore
import type { CotatoAttendanceTimeResponse } from '../model';
// @ts-ignore
import type { CotatoAttendancesResponse } from '../model';
// @ts-ignore
import type { CotatoCsEducationOnSessionNumberResponse } from '../model';
// @ts-ignore
import type { CotatoDeleteSessionImageRequest } from '../model';
// @ts-ignore
import type { CotatoLocalTime } from '../model';
// @ts-ignore
import type { CotatoMemberAttendanceRecordsResponse } from '../model';
// @ts-ignore
import type { CotatoOfflineAttendanceRequest } from '../model';
// @ts-ignore
import type { CotatoOnlineAttendanceRequest } from '../model';
// @ts-ignore
import type { CotatoSessionListResponse } from '../model';
// @ts-ignore
import type { CotatoUpdateAttendanceRequest } from '../model';
// @ts-ignore
import type { CotatoUpdateSessionImageOrderRequest } from '../model';
// @ts-ignore
import type { CotatoUpdateSessionNumberRequest } from '../model';
// @ts-ignore
import type { CotatoUpdateSessionRequest } from '../model';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Session 추가 API
         * @param {number} generationId 
         * @param {string} title 
         * @param {string} description 
         * @param {string} sessionDate 
         * @param {Array<File>} [images] 
         * @param {number} [latitude] 
         * @param {number} [longitude] 
         * @param {string} [placeName] 
         * @param {CotatoLocalTime} [attendanceDeadLine] 
         * @param {CotatoLocalTime} [lateDeadLine] 
         * @param {AddSessionItIssueEnum} [itIssue] 
         * @param {AddSessionNetworkingEnum} [networking] 
         * @param {AddSessionCsEducationEnum} [csEducation] 
         * @param {AddSessionDevTalkEnum} [devTalk] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSession: async (generationId: number, title: string, description: string, sessionDate: string, images?: Array<File>, latitude?: number, longitude?: number, placeName?: string, attendanceDeadLine?: CotatoLocalTime, lateDeadLine?: CotatoLocalTime, itIssue?: AddSessionItIssueEnum, networking?: AddSessionNetworkingEnum, csEducation?: AddSessionCsEducationEnum, devTalk?: AddSessionDevTalkEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'generationId' is not null or undefined
            assertParamExists('addSession', 'generationId', generationId)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('addSession', 'title', title)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('addSession', 'description', description)
            // verify required parameter 'sessionDate' is not null or undefined
            assertParamExists('addSession', 'sessionDate', sessionDate)
            const localVarPath = `/v1/api/session/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (generationId !== undefined) { 
                localVarFormParams.append('generationId', generationId as any);
            }
                if (images) {
                images.forEach((element) => {
                  localVarFormParams.append('images', element as any);
                })
            }

    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (latitude !== undefined) { 
                localVarFormParams.append('latitude', latitude as any);
            }
    
            if (longitude !== undefined) { 
                localVarFormParams.append('longitude', longitude as any);
            }
    
            if (placeName !== undefined) { 
                localVarFormParams.append('placeName', placeName as any);
            }
    
            if (sessionDate !== undefined) { 
                localVarFormParams.append('sessionDate', sessionDate as any);
            }
    
            if (attendanceDeadLine !== undefined) { 
                localVarFormParams.append('attendanceDeadLine', new Blob([JSON.stringify(attendanceDeadLine)], { type: "application/json", }));
            }
    
            if (lateDeadLine !== undefined) { 
                localVarFormParams.append('lateDeadLine', new Blob([JSON.stringify(lateDeadLine)], { type: "application/json", }));
            }
    
            if (itIssue !== undefined) { 
                localVarFormParams.append('itIssue', itIssue as any);
            }
    
            if (networking !== undefined) { 
                localVarFormParams.append('networking', networking as any);
            }
    
            if (csEducation !== undefined) { 
                localVarFormParams.append('csEducation', csEducation as any);
            }
    
            if (devTalk !== undefined) { 
                localVarFormParams.append('devTalk', devTalk as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 세션 사진 추가 API
         * @param {number} sessionId 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        additionalSessionImage: async (sessionId: number, image: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('additionalSessionImage', 'sessionId', sessionId)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('additionalSessionImage', 'image', image)
            const localVarPath = `/v1/api/session/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (sessionId !== undefined) { 
                localVarFormParams.append('sessionId', sessionId as any);
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 세션 사진 삭제 API
         * @param {CotatoDeleteSessionImageRequest} cotatoDeleteSessionImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSessionImage: async (cotatoDeleteSessionImageRequest: CotatoDeleteSessionImageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoDeleteSessionImageRequest' is not null or undefined
            assertParamExists('deleteSessionImage', 'cotatoDeleteSessionImageRequest', cotatoDeleteSessionImageRequest)
            const localVarPath = `/v1/api/session/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoDeleteSessionImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CS ON인 세션 목록 반환 API
         * @param {number} generationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCsOnSessionsByGenerationId: async (generationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'generationId' is not null or undefined
            assertParamExists('findAllCsOnSessionsByGenerationId', 'generationId', generationId)
            const localVarPath = `/v1/api/session/cs-on`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (generationId !== undefined) {
                localVarQueryParameter['generationId'] = generationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 부원의 기수별 출결 기록 반환 API
         * @param {number} generationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRecordsByGeneration: async (generationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'generationId' is not null or undefined
            assertParamExists('findAllRecordsByGeneration', 'generationId', generationId)
            const localVarPath = `/v2/api/attendances/records/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (generationId !== undefined) {
                localVarQueryParameter['generationId'] = generationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 출결사항 기간 단위 조회 API
         * @param {number} generationId 
         * @param {number} [month] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAttendanceRecords: async (generationId: number, month?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'generationId' is not null or undefined
            assertParamExists('findAttendanceRecords', 'generationId', generationId)
            const localVarPath = `/v2/api/attendances/records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (generationId !== undefined) {
                localVarQueryParameter['generationId'] = generationId;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 출결사항 출석 단위 조회 API
         * @param {number} attendanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAttendanceRecordsByAttendance: async (attendanceId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attendanceId' is not null or undefined
            assertParamExists('findAttendanceRecordsByAttendance', 'attendanceId', attendanceId)
            const localVarPath = `/v2/api/attendances/{attendance-id}/records`
                .replace(`{${"attendance-id"}}`, encodeURIComponent(String(attendanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 세션 시간 반환 API
         * @param {number} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAttendanceTimeInfo: async (sessionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('findAttendanceTimeInfo', 'sessionId', sessionId)
            const localVarPath = `/v2/api/attendances/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sessionId !== undefined) {
                localVarQueryParameter['sessionId'] = sessionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 기수별 출석 목록 조회 API
         * @param {number} generationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAttendancesByGeneration: async (generationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'generationId' is not null or undefined
            assertParamExists('findAttendancesByGeneration', 'generationId', generationId)
            const localVarPath = `/v2/api/attendances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (generationId !== undefined) {
                localVarQueryParameter['generationId'] = generationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 세션 목록 반환 API
         * @param {number} generationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSessionsByGenerationId: async (generationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'generationId' is not null or undefined
            assertParamExists('findSessionsByGenerationId', 'generationId', generationId)
            const localVarPath = `/v1/api/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (generationId !== undefined) {
                localVarQueryParameter['generationId'] = generationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 대면 출결 입력 API
         * @param {CotatoOfflineAttendanceRequest} cotatoOfflineAttendanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitOfflineAttendanceRecord: async (cotatoOfflineAttendanceRequest: CotatoOfflineAttendanceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoOfflineAttendanceRequest' is not null or undefined
            assertParamExists('submitOfflineAttendanceRecord', 'cotatoOfflineAttendanceRequest', cotatoOfflineAttendanceRequest)
            const localVarPath = `/v2/api/attendances/records/offline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoOfflineAttendanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 비대면 출결 입력 API
         * @param {CotatoOnlineAttendanceRequest} cotatoOnlineAttendanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitOnlineAttendanceRecord: async (cotatoOnlineAttendanceRequest: CotatoOnlineAttendanceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoOnlineAttendanceRequest' is not null or undefined
            assertParamExists('submitOnlineAttendanceRecord', 'cotatoOnlineAttendanceRequest', cotatoOnlineAttendanceRequest)
            const localVarPath = `/v2/api/attendances/records/online`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoOnlineAttendanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 출석 정보 변경 API
         * @param {CotatoUpdateAttendanceRequest} cotatoUpdateAttendanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttendance: async (cotatoUpdateAttendanceRequest: CotatoUpdateAttendanceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoUpdateAttendanceRequest' is not null or undefined
            assertParamExists('updateAttendance', 'cotatoUpdateAttendanceRequest', cotatoUpdateAttendanceRequest)
            const localVarPath = `/v2/api/attendances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoUpdateAttendanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 세션 수정 API
         * @param {CotatoUpdateSessionRequest} cotatoUpdateSessionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSession: async (cotatoUpdateSessionRequest: CotatoUpdateSessionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoUpdateSessionRequest' is not null or undefined
            assertParamExists('updateSession', 'cotatoUpdateSessionRequest', cotatoUpdateSessionRequest)
            const localVarPath = `/v1/api/session/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoUpdateSessionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 세션 사진 순서 변경 API
         * @param {CotatoUpdateSessionImageOrderRequest} cotatoUpdateSessionImageOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSessionImageOrder: async (cotatoUpdateSessionImageOrderRequest: CotatoUpdateSessionImageOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoUpdateSessionImageOrderRequest' is not null or undefined
            assertParamExists('updateSessionImageOrder', 'cotatoUpdateSessionImageOrderRequest', cotatoUpdateSessionImageOrderRequest)
            const localVarPath = `/v1/api/session/image/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoUpdateSessionImageOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 세션 숫자 변경 API
         * @param {CotatoUpdateSessionNumberRequest} cotatoUpdateSessionNumberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSessionNumber: async (cotatoUpdateSessionNumberRequest: CotatoUpdateSessionNumberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoUpdateSessionNumberRequest' is not null or undefined
            assertParamExists('updateSessionNumber', 'cotatoUpdateSessionNumberRequest', cotatoUpdateSessionNumberRequest)
            const localVarPath = `/v1/api/session/number`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoUpdateSessionNumberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Session 추가 API
         * @param {number} generationId 
         * @param {string} title 
         * @param {string} description 
         * @param {string} sessionDate 
         * @param {Array<File>} [images] 
         * @param {number} [latitude] 
         * @param {number} [longitude] 
         * @param {string} [placeName] 
         * @param {CotatoLocalTime} [attendanceDeadLine] 
         * @param {CotatoLocalTime} [lateDeadLine] 
         * @param {AddSessionItIssueEnum} [itIssue] 
         * @param {AddSessionNetworkingEnum} [networking] 
         * @param {AddSessionCsEducationEnum} [csEducation] 
         * @param {AddSessionDevTalkEnum} [devTalk] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSession(generationId: number, title: string, description: string, sessionDate: string, images?: Array<File>, latitude?: number, longitude?: number, placeName?: string, attendanceDeadLine?: CotatoLocalTime, lateDeadLine?: CotatoLocalTime, itIssue?: AddSessionItIssueEnum, networking?: AddSessionNetworkingEnum, csEducation?: AddSessionCsEducationEnum, devTalk?: AddSessionDevTalkEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoAddSessionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSession(generationId, title, description, sessionDate, images, latitude, longitude, placeName, attendanceDeadLine, lateDeadLine, itIssue, networking, csEducation, devTalk, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 세션 사진 추가 API
         * @param {number} sessionId 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async additionalSessionImage(sessionId: number, image: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoAddSessionImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.additionalSessionImage(sessionId, image, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.additionalSessionImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 세션 사진 삭제 API
         * @param {CotatoDeleteSessionImageRequest} cotatoDeleteSessionImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSessionImage(cotatoDeleteSessionImageRequest: CotatoDeleteSessionImageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSessionImage(cotatoDeleteSessionImageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteSessionImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary CS ON인 세션 목록 반환 API
         * @param {number} generationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllCsOnSessionsByGenerationId(generationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CotatoCsEducationOnSessionNumberResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllCsOnSessionsByGenerationId(generationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findAllCsOnSessionsByGenerationId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 부원의 기수별 출결 기록 반환 API
         * @param {number} generationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllRecordsByGeneration(generationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoMemberAttendanceRecordsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllRecordsByGeneration(generationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findAllRecordsByGeneration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 출결사항 기간 단위 조회 API
         * @param {number} generationId 
         * @param {number} [month] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAttendanceRecords(generationId: number, month?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CotatoAttendanceRecordResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAttendanceRecords(generationId, month, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findAttendanceRecords']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 출결사항 출석 단위 조회 API
         * @param {number} attendanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAttendanceRecordsByAttendance(attendanceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CotatoAttendanceRecordResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAttendanceRecordsByAttendance(attendanceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findAttendanceRecordsByAttendance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 세션 시간 반환 API
         * @param {number} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAttendanceTimeInfo(sessionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoAttendanceTimeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAttendanceTimeInfo(sessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findAttendanceTimeInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 기수별 출석 목록 조회 API
         * @param {number} generationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAttendancesByGeneration(generationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoAttendancesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAttendancesByGeneration(generationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findAttendancesByGeneration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 세션 목록 반환 API
         * @param {number} generationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findSessionsByGenerationId(generationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CotatoSessionListResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findSessionsByGenerationId(generationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findSessionsByGenerationId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 대면 출결 입력 API
         * @param {CotatoOfflineAttendanceRequest} cotatoOfflineAttendanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitOfflineAttendanceRecord(cotatoOfflineAttendanceRequest: CotatoOfflineAttendanceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoAttendResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitOfflineAttendanceRecord(cotatoOfflineAttendanceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.submitOfflineAttendanceRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 비대면 출결 입력 API
         * @param {CotatoOnlineAttendanceRequest} cotatoOnlineAttendanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitOnlineAttendanceRecord(cotatoOnlineAttendanceRequest: CotatoOnlineAttendanceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoAttendResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitOnlineAttendanceRecord(cotatoOnlineAttendanceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.submitOnlineAttendanceRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 출석 정보 변경 API
         * @param {CotatoUpdateAttendanceRequest} cotatoUpdateAttendanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAttendance(cotatoUpdateAttendanceRequest: CotatoUpdateAttendanceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAttendance(cotatoUpdateAttendanceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateAttendance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 세션 수정 API
         * @param {CotatoUpdateSessionRequest} cotatoUpdateSessionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSession(cotatoUpdateSessionRequest: CotatoUpdateSessionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSession(cotatoUpdateSessionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 세션 사진 순서 변경 API
         * @param {CotatoUpdateSessionImageOrderRequest} cotatoUpdateSessionImageOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSessionImageOrder(cotatoUpdateSessionImageOrderRequest: CotatoUpdateSessionImageOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSessionImageOrder(cotatoUpdateSessionImageOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateSessionImageOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 세션 숫자 변경 API
         * @param {CotatoUpdateSessionNumberRequest} cotatoUpdateSessionNumberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSessionNumber(cotatoUpdateSessionNumberRequest: CotatoUpdateSessionNumberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSessionNumber(cotatoUpdateSessionNumberRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateSessionNumber']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Session 추가 API
         * @param {DefaultApiAddSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSession(requestParameters: DefaultApiAddSessionRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoAddSessionResponse> {
            return localVarFp.addSession(requestParameters.generationId, requestParameters.title, requestParameters.description, requestParameters.sessionDate, requestParameters.images, requestParameters.latitude, requestParameters.longitude, requestParameters.placeName, requestParameters.attendanceDeadLine, requestParameters.lateDeadLine, requestParameters.itIssue, requestParameters.networking, requestParameters.csEducation, requestParameters.devTalk, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 세션 사진 추가 API
         * @param {DefaultApiAdditionalSessionImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        additionalSessionImage(requestParameters: DefaultApiAdditionalSessionImageRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoAddSessionImageResponse> {
            return localVarFp.additionalSessionImage(requestParameters.sessionId, requestParameters.image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 세션 사진 삭제 API
         * @param {DefaultApiDeleteSessionImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSessionImage(requestParameters: DefaultApiDeleteSessionImageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSessionImage(requestParameters.cotatoDeleteSessionImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CS ON인 세션 목록 반환 API
         * @param {DefaultApiFindAllCsOnSessionsByGenerationIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCsOnSessionsByGenerationId(requestParameters: DefaultApiFindAllCsOnSessionsByGenerationIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<CotatoCsEducationOnSessionNumberResponse>> {
            return localVarFp.findAllCsOnSessionsByGenerationId(requestParameters.generationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 부원의 기수별 출결 기록 반환 API
         * @param {DefaultApiFindAllRecordsByGenerationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRecordsByGeneration(requestParameters: DefaultApiFindAllRecordsByGenerationRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoMemberAttendanceRecordsResponse> {
            return localVarFp.findAllRecordsByGeneration(requestParameters.generationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 출결사항 기간 단위 조회 API
         * @param {DefaultApiFindAttendanceRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAttendanceRecords(requestParameters: DefaultApiFindAttendanceRecordsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<CotatoAttendanceRecordResponse>> {
            return localVarFp.findAttendanceRecords(requestParameters.generationId, requestParameters.month, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 출결사항 출석 단위 조회 API
         * @param {DefaultApiFindAttendanceRecordsByAttendanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAttendanceRecordsByAttendance(requestParameters: DefaultApiFindAttendanceRecordsByAttendanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<CotatoAttendanceRecordResponse>> {
            return localVarFp.findAttendanceRecordsByAttendance(requestParameters.attendanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 세션 시간 반환 API
         * @param {DefaultApiFindAttendanceTimeInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAttendanceTimeInfo(requestParameters: DefaultApiFindAttendanceTimeInfoRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoAttendanceTimeResponse> {
            return localVarFp.findAttendanceTimeInfo(requestParameters.sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 기수별 출석 목록 조회 API
         * @param {DefaultApiFindAttendancesByGenerationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAttendancesByGeneration(requestParameters: DefaultApiFindAttendancesByGenerationRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoAttendancesResponse> {
            return localVarFp.findAttendancesByGeneration(requestParameters.generationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 세션 목록 반환 API
         * @param {DefaultApiFindSessionsByGenerationIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSessionsByGenerationId(requestParameters: DefaultApiFindSessionsByGenerationIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<CotatoSessionListResponse>> {
            return localVarFp.findSessionsByGenerationId(requestParameters.generationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 대면 출결 입력 API
         * @param {DefaultApiSubmitOfflineAttendanceRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitOfflineAttendanceRecord(requestParameters: DefaultApiSubmitOfflineAttendanceRecordRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoAttendResponse> {
            return localVarFp.submitOfflineAttendanceRecord(requestParameters.cotatoOfflineAttendanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 비대면 출결 입력 API
         * @param {DefaultApiSubmitOnlineAttendanceRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitOnlineAttendanceRecord(requestParameters: DefaultApiSubmitOnlineAttendanceRecordRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoAttendResponse> {
            return localVarFp.submitOnlineAttendanceRecord(requestParameters.cotatoOnlineAttendanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 출석 정보 변경 API
         * @param {DefaultApiUpdateAttendanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttendance(requestParameters: DefaultApiUpdateAttendanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateAttendance(requestParameters.cotatoUpdateAttendanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 세션 수정 API
         * @param {DefaultApiUpdateSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSession(requestParameters: DefaultApiUpdateSessionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateSession(requestParameters.cotatoUpdateSessionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 세션 사진 순서 변경 API
         * @param {DefaultApiUpdateSessionImageOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSessionImageOrder(requestParameters: DefaultApiUpdateSessionImageOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateSessionImageOrder(requestParameters.cotatoUpdateSessionImageOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 세션 숫자 변경 API
         * @param {DefaultApiUpdateSessionNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSessionNumber(requestParameters: DefaultApiUpdateSessionNumberRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateSessionNumber(requestParameters.cotatoUpdateSessionNumberRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addSession operation in DefaultApi.
 * @export
 * @interface DefaultApiAddSessionRequest
 */
export interface DefaultApiAddSessionRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiAddSession
     */
    readonly generationId: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAddSession
     */
    readonly title: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAddSession
     */
    readonly description: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAddSession
     */
    readonly sessionDate: string

    /**
     * 
     * @type {Array<File>}
     * @memberof DefaultApiAddSession
     */
    readonly images?: Array<File>

    /**
     * 
     * @type {number}
     * @memberof DefaultApiAddSession
     */
    readonly latitude?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiAddSession
     */
    readonly longitude?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAddSession
     */
    readonly placeName?: string

    /**
     * 
     * @type {CotatoLocalTime}
     * @memberof DefaultApiAddSession
     */
    readonly attendanceDeadLine?: CotatoLocalTime

    /**
     * 
     * @type {CotatoLocalTime}
     * @memberof DefaultApiAddSession
     */
    readonly lateDeadLine?: CotatoLocalTime

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAddSession
     */
    readonly itIssue?: AddSessionItIssueEnum

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAddSession
     */
    readonly networking?: AddSessionNetworkingEnum

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAddSession
     */
    readonly csEducation?: AddSessionCsEducationEnum

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAddSession
     */
    readonly devTalk?: AddSessionDevTalkEnum
}

/**
 * Request parameters for additionalSessionImage operation in DefaultApi.
 * @export
 * @interface DefaultApiAdditionalSessionImageRequest
 */
export interface DefaultApiAdditionalSessionImageRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiAdditionalSessionImage
     */
    readonly sessionId: number

    /**
     * 
     * @type {File}
     * @memberof DefaultApiAdditionalSessionImage
     */
    readonly image: File
}

/**
 * Request parameters for deleteSessionImage operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteSessionImageRequest
 */
export interface DefaultApiDeleteSessionImageRequest {
    /**
     * 
     * @type {CotatoDeleteSessionImageRequest}
     * @memberof DefaultApiDeleteSessionImage
     */
    readonly cotatoDeleteSessionImageRequest: CotatoDeleteSessionImageRequest
}

/**
 * Request parameters for findAllCsOnSessionsByGenerationId operation in DefaultApi.
 * @export
 * @interface DefaultApiFindAllCsOnSessionsByGenerationIdRequest
 */
export interface DefaultApiFindAllCsOnSessionsByGenerationIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindAllCsOnSessionsByGenerationId
     */
    readonly generationId: number
}

/**
 * Request parameters for findAllRecordsByGeneration operation in DefaultApi.
 * @export
 * @interface DefaultApiFindAllRecordsByGenerationRequest
 */
export interface DefaultApiFindAllRecordsByGenerationRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindAllRecordsByGeneration
     */
    readonly generationId: number
}

/**
 * Request parameters for findAttendanceRecords operation in DefaultApi.
 * @export
 * @interface DefaultApiFindAttendanceRecordsRequest
 */
export interface DefaultApiFindAttendanceRecordsRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindAttendanceRecords
     */
    readonly generationId: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindAttendanceRecords
     */
    readonly month?: number
}

/**
 * Request parameters for findAttendanceRecordsByAttendance operation in DefaultApi.
 * @export
 * @interface DefaultApiFindAttendanceRecordsByAttendanceRequest
 */
export interface DefaultApiFindAttendanceRecordsByAttendanceRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindAttendanceRecordsByAttendance
     */
    readonly attendanceId: number
}

/**
 * Request parameters for findAttendanceTimeInfo operation in DefaultApi.
 * @export
 * @interface DefaultApiFindAttendanceTimeInfoRequest
 */
export interface DefaultApiFindAttendanceTimeInfoRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindAttendanceTimeInfo
     */
    readonly sessionId: number
}

/**
 * Request parameters for findAttendancesByGeneration operation in DefaultApi.
 * @export
 * @interface DefaultApiFindAttendancesByGenerationRequest
 */
export interface DefaultApiFindAttendancesByGenerationRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindAttendancesByGeneration
     */
    readonly generationId: number
}

/**
 * Request parameters for findSessionsByGenerationId operation in DefaultApi.
 * @export
 * @interface DefaultApiFindSessionsByGenerationIdRequest
 */
export interface DefaultApiFindSessionsByGenerationIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindSessionsByGenerationId
     */
    readonly generationId: number
}

/**
 * Request parameters for submitOfflineAttendanceRecord operation in DefaultApi.
 * @export
 * @interface DefaultApiSubmitOfflineAttendanceRecordRequest
 */
export interface DefaultApiSubmitOfflineAttendanceRecordRequest {
    /**
     * 
     * @type {CotatoOfflineAttendanceRequest}
     * @memberof DefaultApiSubmitOfflineAttendanceRecord
     */
    readonly cotatoOfflineAttendanceRequest: CotatoOfflineAttendanceRequest
}

/**
 * Request parameters for submitOnlineAttendanceRecord operation in DefaultApi.
 * @export
 * @interface DefaultApiSubmitOnlineAttendanceRecordRequest
 */
export interface DefaultApiSubmitOnlineAttendanceRecordRequest {
    /**
     * 
     * @type {CotatoOnlineAttendanceRequest}
     * @memberof DefaultApiSubmitOnlineAttendanceRecord
     */
    readonly cotatoOnlineAttendanceRequest: CotatoOnlineAttendanceRequest
}

/**
 * Request parameters for updateAttendance operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateAttendanceRequest
 */
export interface DefaultApiUpdateAttendanceRequest {
    /**
     * 
     * @type {CotatoUpdateAttendanceRequest}
     * @memberof DefaultApiUpdateAttendance
     */
    readonly cotatoUpdateAttendanceRequest: CotatoUpdateAttendanceRequest
}

/**
 * Request parameters for updateSession operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateSessionRequest
 */
export interface DefaultApiUpdateSessionRequest {
    /**
     * 
     * @type {CotatoUpdateSessionRequest}
     * @memberof DefaultApiUpdateSession
     */
    readonly cotatoUpdateSessionRequest: CotatoUpdateSessionRequest
}

/**
 * Request parameters for updateSessionImageOrder operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateSessionImageOrderRequest
 */
export interface DefaultApiUpdateSessionImageOrderRequest {
    /**
     * 
     * @type {CotatoUpdateSessionImageOrderRequest}
     * @memberof DefaultApiUpdateSessionImageOrder
     */
    readonly cotatoUpdateSessionImageOrderRequest: CotatoUpdateSessionImageOrderRequest
}

/**
 * Request parameters for updateSessionNumber operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateSessionNumberRequest
 */
export interface DefaultApiUpdateSessionNumberRequest {
    /**
     * 
     * @type {CotatoUpdateSessionNumberRequest}
     * @memberof DefaultApiUpdateSessionNumber
     */
    readonly cotatoUpdateSessionNumberRequest: CotatoUpdateSessionNumberRequest
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Session 추가 API
     * @param {DefaultApiAddSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addSession(requestParameters: DefaultApiAddSessionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addSession(requestParameters.generationId, requestParameters.title, requestParameters.description, requestParameters.sessionDate, requestParameters.images, requestParameters.latitude, requestParameters.longitude, requestParameters.placeName, requestParameters.attendanceDeadLine, requestParameters.lateDeadLine, requestParameters.itIssue, requestParameters.networking, requestParameters.csEducation, requestParameters.devTalk, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 세션 사진 추가 API
     * @param {DefaultApiAdditionalSessionImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public additionalSessionImage(requestParameters: DefaultApiAdditionalSessionImageRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).additionalSessionImage(requestParameters.sessionId, requestParameters.image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 세션 사진 삭제 API
     * @param {DefaultApiDeleteSessionImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSessionImage(requestParameters: DefaultApiDeleteSessionImageRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSessionImage(requestParameters.cotatoDeleteSessionImageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary CS ON인 세션 목록 반환 API
     * @param {DefaultApiFindAllCsOnSessionsByGenerationIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAllCsOnSessionsByGenerationId(requestParameters: DefaultApiFindAllCsOnSessionsByGenerationIdRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAllCsOnSessionsByGenerationId(requestParameters.generationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 부원의 기수별 출결 기록 반환 API
     * @param {DefaultApiFindAllRecordsByGenerationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAllRecordsByGeneration(requestParameters: DefaultApiFindAllRecordsByGenerationRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAllRecordsByGeneration(requestParameters.generationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 출결사항 기간 단위 조회 API
     * @param {DefaultApiFindAttendanceRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAttendanceRecords(requestParameters: DefaultApiFindAttendanceRecordsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAttendanceRecords(requestParameters.generationId, requestParameters.month, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 출결사항 출석 단위 조회 API
     * @param {DefaultApiFindAttendanceRecordsByAttendanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAttendanceRecordsByAttendance(requestParameters: DefaultApiFindAttendanceRecordsByAttendanceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAttendanceRecordsByAttendance(requestParameters.attendanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 세션 시간 반환 API
     * @param {DefaultApiFindAttendanceTimeInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAttendanceTimeInfo(requestParameters: DefaultApiFindAttendanceTimeInfoRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAttendanceTimeInfo(requestParameters.sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 기수별 출석 목록 조회 API
     * @param {DefaultApiFindAttendancesByGenerationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAttendancesByGeneration(requestParameters: DefaultApiFindAttendancesByGenerationRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAttendancesByGeneration(requestParameters.generationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 세션 목록 반환 API
     * @param {DefaultApiFindSessionsByGenerationIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findSessionsByGenerationId(requestParameters: DefaultApiFindSessionsByGenerationIdRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findSessionsByGenerationId(requestParameters.generationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 대면 출결 입력 API
     * @param {DefaultApiSubmitOfflineAttendanceRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public submitOfflineAttendanceRecord(requestParameters: DefaultApiSubmitOfflineAttendanceRecordRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).submitOfflineAttendanceRecord(requestParameters.cotatoOfflineAttendanceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 비대면 출결 입력 API
     * @param {DefaultApiSubmitOnlineAttendanceRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public submitOnlineAttendanceRecord(requestParameters: DefaultApiSubmitOnlineAttendanceRecordRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).submitOnlineAttendanceRecord(requestParameters.cotatoOnlineAttendanceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 출석 정보 변경 API
     * @param {DefaultApiUpdateAttendanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAttendance(requestParameters: DefaultApiUpdateAttendanceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateAttendance(requestParameters.cotatoUpdateAttendanceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 세션 수정 API
     * @param {DefaultApiUpdateSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSession(requestParameters: DefaultApiUpdateSessionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSession(requestParameters.cotatoUpdateSessionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 세션 사진 순서 변경 API
     * @param {DefaultApiUpdateSessionImageOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSessionImageOrder(requestParameters: DefaultApiUpdateSessionImageOrderRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSessionImageOrder(requestParameters.cotatoUpdateSessionImageOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 세션 숫자 변경 API
     * @param {DefaultApiUpdateSessionNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSessionNumber(requestParameters: DefaultApiUpdateSessionNumberRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSessionNumber(requestParameters.cotatoUpdateSessionNumberRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AddSessionItIssueEnum = {
    On: 'IT_ON',
    Off: 'IT_OFF'
} as const;
export type AddSessionItIssueEnum = typeof AddSessionItIssueEnum[keyof typeof AddSessionItIssueEnum];
/**
 * @export
 */
export const AddSessionNetworkingEnum = {
    On: 'NW_ON',
    Off: 'NW_OFF'
} as const;
export type AddSessionNetworkingEnum = typeof AddSessionNetworkingEnum[keyof typeof AddSessionNetworkingEnum];
/**
 * @export
 */
export const AddSessionCsEducationEnum = {
    On: 'CS_ON',
    Off: 'CS_OFF'
} as const;
export type AddSessionCsEducationEnum = typeof AddSessionCsEducationEnum[keyof typeof AddSessionCsEducationEnum];
/**
 * @export
 */
export const AddSessionDevTalkEnum = {
    On: 'DEVTALK_ON',
    Off: 'DEVTALK_OFF'
} as const;
export type AddSessionDevTalkEnum = typeof AddSessionDevTalkEnum[keyof typeof AddSessionDevTalkEnum];
