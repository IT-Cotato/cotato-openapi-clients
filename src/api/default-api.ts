/* tslint:disable */
/* eslint-disable */
/**
 * CS-QUIZ 프로젝트 API 명세서
 * quiz api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CotatoAttendResponse } from '../model';
// @ts-ignore
import type { CotatoAttendanceRecordResponse } from '../model';
// @ts-ignore
import type { CotatoAttendancesResponse } from '../model';
// @ts-ignore
import type { CotatoMemberAttendanceRecordsResponse } from '../model';
// @ts-ignore
import type { CotatoOfflineAttendanceRequest } from '../model';
// @ts-ignore
import type { CotatoOnlineAttendanceRequest } from '../model';
// @ts-ignore
import type { CotatoUpdateAttendanceRequest } from '../model';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 부원의 기수별 출결 기록 반환 API
         * @param {number} generationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRecordsByGeneration: async (generationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'generationId' is not null or undefined
            assertParamExists('findAllRecordsByGeneration', 'generationId', generationId)
            const localVarPath = `/v2/api/attendances/records/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (generationId !== undefined) {
                localVarQueryParameter['generation-id'] = generationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 출결사항 기간 단위 조회 API
         * @param {number} generationId 
         * @param {number} [month] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAttendanceRecords: async (generationId: number, month?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'generationId' is not null or undefined
            assertParamExists('findAttendanceRecords', 'generationId', generationId)
            const localVarPath = `/v2/api/attendances/records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (generationId !== undefined) {
                localVarQueryParameter['generationId'] = generationId;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 출결사항 출석 단위 조회 API
         * @param {number} attendanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAttendanceRecordsByAttendance: async (attendanceId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attendanceId' is not null or undefined
            assertParamExists('findAttendanceRecordsByAttendance', 'attendanceId', attendanceId)
            const localVarPath = `/v2/api/attendances/{attendance-id}/records`
                .replace(`{${"attendance-id"}}`, encodeURIComponent(String(attendanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 기수별 출석 목록 조회 API
         * @param {number} generationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAttendancesByGeneration: async (generationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'generationId' is not null or undefined
            assertParamExists('findAttendancesByGeneration', 'generationId', generationId)
            const localVarPath = `/v2/api/attendances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (generationId !== undefined) {
                localVarQueryParameter['generationId'] = generationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 대면 출결 입력 API
         * @param {CotatoOfflineAttendanceRequest} cotatoOfflineAttendanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitOfflineAttendanceRecord: async (cotatoOfflineAttendanceRequest: CotatoOfflineAttendanceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoOfflineAttendanceRequest' is not null or undefined
            assertParamExists('submitOfflineAttendanceRecord', 'cotatoOfflineAttendanceRequest', cotatoOfflineAttendanceRequest)
            const localVarPath = `/v2/api/attendances/records/offline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoOfflineAttendanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 비대면 출결 입력 API
         * @param {CotatoOnlineAttendanceRequest} cotatoOnlineAttendanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitOnlineAttendanceRecord: async (cotatoOnlineAttendanceRequest: CotatoOnlineAttendanceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoOnlineAttendanceRequest' is not null or undefined
            assertParamExists('submitOnlineAttendanceRecord', 'cotatoOnlineAttendanceRequest', cotatoOnlineAttendanceRequest)
            const localVarPath = `/v2/api/attendances/records/online`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoOnlineAttendanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 출석 정보 변경 API
         * @param {CotatoUpdateAttendanceRequest} cotatoUpdateAttendanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttendance: async (cotatoUpdateAttendanceRequest: CotatoUpdateAttendanceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoUpdateAttendanceRequest' is not null or undefined
            assertParamExists('updateAttendance', 'cotatoUpdateAttendanceRequest', cotatoUpdateAttendanceRequest)
            const localVarPath = `/v2/api/attendances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoUpdateAttendanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 부원의 기수별 출결 기록 반환 API
         * @param {number} generationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllRecordsByGeneration(generationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoMemberAttendanceRecordsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllRecordsByGeneration(generationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findAllRecordsByGeneration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 출결사항 기간 단위 조회 API
         * @param {number} generationId 
         * @param {number} [month] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAttendanceRecords(generationId: number, month?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CotatoAttendanceRecordResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAttendanceRecords(generationId, month, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findAttendanceRecords']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 출결사항 출석 단위 조회 API
         * @param {number} attendanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAttendanceRecordsByAttendance(attendanceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CotatoAttendanceRecordResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAttendanceRecordsByAttendance(attendanceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findAttendanceRecordsByAttendance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 기수별 출석 목록 조회 API
         * @param {number} generationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAttendancesByGeneration(generationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoAttendancesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAttendancesByGeneration(generationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findAttendancesByGeneration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 대면 출결 입력 API
         * @param {CotatoOfflineAttendanceRequest} cotatoOfflineAttendanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitOfflineAttendanceRecord(cotatoOfflineAttendanceRequest: CotatoOfflineAttendanceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoAttendResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitOfflineAttendanceRecord(cotatoOfflineAttendanceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.submitOfflineAttendanceRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 비대면 출결 입력 API
         * @param {CotatoOnlineAttendanceRequest} cotatoOnlineAttendanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitOnlineAttendanceRecord(cotatoOnlineAttendanceRequest: CotatoOnlineAttendanceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CotatoAttendResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitOnlineAttendanceRecord(cotatoOnlineAttendanceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.submitOnlineAttendanceRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 출석 정보 변경 API
         * @param {CotatoUpdateAttendanceRequest} cotatoUpdateAttendanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAttendance(cotatoUpdateAttendanceRequest: CotatoUpdateAttendanceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAttendance(cotatoUpdateAttendanceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateAttendance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 부원의 기수별 출결 기록 반환 API
         * @param {DefaultApiFindAllRecordsByGenerationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllRecordsByGeneration(requestParameters: DefaultApiFindAllRecordsByGenerationRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoMemberAttendanceRecordsResponse> {
            return localVarFp.findAllRecordsByGeneration(requestParameters.generationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 출결사항 기간 단위 조회 API
         * @param {DefaultApiFindAttendanceRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAttendanceRecords(requestParameters: DefaultApiFindAttendanceRecordsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<CotatoAttendanceRecordResponse>> {
            return localVarFp.findAttendanceRecords(requestParameters.generationId, requestParameters.month, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 출결사항 출석 단위 조회 API
         * @param {DefaultApiFindAttendanceRecordsByAttendanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAttendanceRecordsByAttendance(requestParameters: DefaultApiFindAttendanceRecordsByAttendanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<CotatoAttendanceRecordResponse>> {
            return localVarFp.findAttendanceRecordsByAttendance(requestParameters.attendanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 기수별 출석 목록 조회 API
         * @param {DefaultApiFindAttendancesByGenerationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAttendancesByGeneration(requestParameters: DefaultApiFindAttendancesByGenerationRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoAttendancesResponse> {
            return localVarFp.findAttendancesByGeneration(requestParameters.generationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 대면 출결 입력 API
         * @param {DefaultApiSubmitOfflineAttendanceRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitOfflineAttendanceRecord(requestParameters: DefaultApiSubmitOfflineAttendanceRecordRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoAttendResponse> {
            return localVarFp.submitOfflineAttendanceRecord(requestParameters.cotatoOfflineAttendanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 비대면 출결 입력 API
         * @param {DefaultApiSubmitOnlineAttendanceRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitOnlineAttendanceRecord(requestParameters: DefaultApiSubmitOnlineAttendanceRecordRequest, options?: RawAxiosRequestConfig): AxiosPromise<CotatoAttendResponse> {
            return localVarFp.submitOnlineAttendanceRecord(requestParameters.cotatoOnlineAttendanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 출석 정보 변경 API
         * @param {DefaultApiUpdateAttendanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttendance(requestParameters: DefaultApiUpdateAttendanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateAttendance(requestParameters.cotatoUpdateAttendanceRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for findAllRecordsByGeneration operation in DefaultApi.
 * @export
 * @interface DefaultApiFindAllRecordsByGenerationRequest
 */
export interface DefaultApiFindAllRecordsByGenerationRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindAllRecordsByGeneration
     */
    readonly generationId: number
}

/**
 * Request parameters for findAttendanceRecords operation in DefaultApi.
 * @export
 * @interface DefaultApiFindAttendanceRecordsRequest
 */
export interface DefaultApiFindAttendanceRecordsRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindAttendanceRecords
     */
    readonly generationId: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindAttendanceRecords
     */
    readonly month?: number
}

/**
 * Request parameters for findAttendanceRecordsByAttendance operation in DefaultApi.
 * @export
 * @interface DefaultApiFindAttendanceRecordsByAttendanceRequest
 */
export interface DefaultApiFindAttendanceRecordsByAttendanceRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindAttendanceRecordsByAttendance
     */
    readonly attendanceId: number
}

/**
 * Request parameters for findAttendancesByGeneration operation in DefaultApi.
 * @export
 * @interface DefaultApiFindAttendancesByGenerationRequest
 */
export interface DefaultApiFindAttendancesByGenerationRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindAttendancesByGeneration
     */
    readonly generationId: number
}

/**
 * Request parameters for submitOfflineAttendanceRecord operation in DefaultApi.
 * @export
 * @interface DefaultApiSubmitOfflineAttendanceRecordRequest
 */
export interface DefaultApiSubmitOfflineAttendanceRecordRequest {
    /**
     * 
     * @type {CotatoOfflineAttendanceRequest}
     * @memberof DefaultApiSubmitOfflineAttendanceRecord
     */
    readonly cotatoOfflineAttendanceRequest: CotatoOfflineAttendanceRequest
}

/**
 * Request parameters for submitOnlineAttendanceRecord operation in DefaultApi.
 * @export
 * @interface DefaultApiSubmitOnlineAttendanceRecordRequest
 */
export interface DefaultApiSubmitOnlineAttendanceRecordRequest {
    /**
     * 
     * @type {CotatoOnlineAttendanceRequest}
     * @memberof DefaultApiSubmitOnlineAttendanceRecord
     */
    readonly cotatoOnlineAttendanceRequest: CotatoOnlineAttendanceRequest
}

/**
 * Request parameters for updateAttendance operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateAttendanceRequest
 */
export interface DefaultApiUpdateAttendanceRequest {
    /**
     * 
     * @type {CotatoUpdateAttendanceRequest}
     * @memberof DefaultApiUpdateAttendance
     */
    readonly cotatoUpdateAttendanceRequest: CotatoUpdateAttendanceRequest
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 부원의 기수별 출결 기록 반환 API
     * @param {DefaultApiFindAllRecordsByGenerationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAllRecordsByGeneration(requestParameters: DefaultApiFindAllRecordsByGenerationRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAllRecordsByGeneration(requestParameters.generationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 출결사항 기간 단위 조회 API
     * @param {DefaultApiFindAttendanceRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAttendanceRecords(requestParameters: DefaultApiFindAttendanceRecordsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAttendanceRecords(requestParameters.generationId, requestParameters.month, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 출결사항 출석 단위 조회 API
     * @param {DefaultApiFindAttendanceRecordsByAttendanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAttendanceRecordsByAttendance(requestParameters: DefaultApiFindAttendanceRecordsByAttendanceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAttendanceRecordsByAttendance(requestParameters.attendanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 기수별 출석 목록 조회 API
     * @param {DefaultApiFindAttendancesByGenerationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAttendancesByGeneration(requestParameters: DefaultApiFindAttendancesByGenerationRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAttendancesByGeneration(requestParameters.generationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 대면 출결 입력 API
     * @param {DefaultApiSubmitOfflineAttendanceRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public submitOfflineAttendanceRecord(requestParameters: DefaultApiSubmitOfflineAttendanceRecordRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).submitOfflineAttendanceRecord(requestParameters.cotatoOfflineAttendanceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 비대면 출결 입력 API
     * @param {DefaultApiSubmitOnlineAttendanceRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public submitOnlineAttendanceRecord(requestParameters: DefaultApiSubmitOnlineAttendanceRecordRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).submitOnlineAttendanceRecord(requestParameters.cotatoOnlineAttendanceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 출석 정보 변경 API
     * @param {DefaultApiUpdateAttendanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAttendance(requestParameters: DefaultApiUpdateAttendanceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateAttendance(requestParameters.cotatoUpdateAttendanceRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

