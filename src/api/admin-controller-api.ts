/* tslint:disable */
/* eslint-disable */
/**
 * CS-QUIZ 프로젝트 API 명세서
 * quiz api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CotatoApplyMemberInfoResponse } from '../model';
// @ts-ignore
import type { CotatoMemberApproveRequest } from '../model';
// @ts-ignore
import type { CotatoMemberEnrollInfoResponse } from '../model';
// @ts-ignore
import type { CotatoMemberRejectRequest } from '../model';
// @ts-ignore
import type { CotatoUpdateActiveMemberRoleRequest } from '../model';
// @ts-ignore
import type { CotatoUpdateActiveMemberToOldMemberRequest } from '../model';
// @ts-ignore
import type { CotatoUpdateOldMemberRoleRequest } from '../model';
/**
 * AdminControllerApi - axios parameter creator
 * @export
 */
export const AdminControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CotatoMemberApproveRequest} cotatoMemberApproveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveApplicant: async (cotatoMemberApproveRequest: CotatoMemberApproveRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoMemberApproveRequest' is not null or undefined
            assertParamExists('approveApplicant', 'cotatoMemberApproveRequest', cotatoMemberApproveRequest)
            const localVarPath = `/v1/api/admin/approve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoMemberApproveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findApplicantList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/api/admin/applicants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCurrentActiveMembers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/api/admin/active-members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOldMembers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/api/admin/old-members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRejectApplicantList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/api/admin/reject-applicants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoMemberApproveRequest} cotatoMemberApproveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reapproveApplicant: async (cotatoMemberApproveRequest: CotatoMemberApproveRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoMemberApproveRequest' is not null or undefined
            assertParamExists('reapproveApplicant', 'cotatoMemberApproveRequest', cotatoMemberApproveRequest)
            const localVarPath = `/v1/api/admin/reapprove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoMemberApproveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoMemberRejectRequest} cotatoMemberRejectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectApplicant: async (cotatoMemberRejectRequest: CotatoMemberRejectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoMemberRejectRequest' is not null or undefined
            assertParamExists('rejectApplicant', 'cotatoMemberRejectRequest', cotatoMemberRejectRequest)
            const localVarPath = `/v1/api/admin/reject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoMemberRejectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoUpdateActiveMemberRoleRequest} cotatoUpdateActiveMemberRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateActiveMemberRole: async (cotatoUpdateActiveMemberRoleRequest: CotatoUpdateActiveMemberRoleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoUpdateActiveMemberRoleRequest' is not null or undefined
            assertParamExists('updateActiveMemberRole', 'cotatoUpdateActiveMemberRoleRequest', cotatoUpdateActiveMemberRoleRequest)
            const localVarPath = `/v1/api/admin/active-members/role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoUpdateActiveMemberRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoUpdateActiveMemberToOldMemberRequest} cotatoUpdateActiveMemberToOldMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateActiveMembersToOldMembers: async (cotatoUpdateActiveMemberToOldMemberRequest: CotatoUpdateActiveMemberToOldMemberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoUpdateActiveMemberToOldMemberRequest' is not null or undefined
            assertParamExists('updateActiveMembersToOldMembers', 'cotatoUpdateActiveMemberToOldMemberRequest', cotatoUpdateActiveMemberToOldMemberRequest)
            const localVarPath = `/v1/api/admin/active-members/to-old-members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoUpdateActiveMemberToOldMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CotatoUpdateOldMemberRoleRequest} cotatoUpdateOldMemberRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOldMemberToActiveGeneration: async (cotatoUpdateOldMemberRoleRequest: CotatoUpdateOldMemberRoleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cotatoUpdateOldMemberRoleRequest' is not null or undefined
            assertParamExists('updateOldMemberToActiveGeneration', 'cotatoUpdateOldMemberRoleRequest', cotatoUpdateOldMemberRoleRequest)
            const localVarPath = `/v1/api/admin/old-members/role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cotatoUpdateOldMemberRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminControllerApi - functional programming interface
 * @export
 */
export const AdminControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CotatoMemberApproveRequest} cotatoMemberApproveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveApplicant(cotatoMemberApproveRequest: CotatoMemberApproveRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveApplicant(cotatoMemberApproveRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.approveApplicant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findApplicantList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CotatoApplyMemberInfoResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findApplicantList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.findApplicantList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findCurrentActiveMembers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CotatoMemberEnrollInfoResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findCurrentActiveMembers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.findCurrentActiveMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOldMembers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CotatoMemberEnrollInfoResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOldMembers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.findOldMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findRejectApplicantList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CotatoApplyMemberInfoResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findRejectApplicantList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.findRejectApplicantList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoMemberApproveRequest} cotatoMemberApproveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reapproveApplicant(cotatoMemberApproveRequest: CotatoMemberApproveRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reapproveApplicant(cotatoMemberApproveRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.reapproveApplicant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoMemberRejectRequest} cotatoMemberRejectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectApplicant(cotatoMemberRejectRequest: CotatoMemberRejectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectApplicant(cotatoMemberRejectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.rejectApplicant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoUpdateActiveMemberRoleRequest} cotatoUpdateActiveMemberRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateActiveMemberRole(cotatoUpdateActiveMemberRoleRequest: CotatoUpdateActiveMemberRoleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateActiveMemberRole(cotatoUpdateActiveMemberRoleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.updateActiveMemberRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoUpdateActiveMemberToOldMemberRequest} cotatoUpdateActiveMemberToOldMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateActiveMembersToOldMembers(cotatoUpdateActiveMemberToOldMemberRequest: CotatoUpdateActiveMemberToOldMemberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateActiveMembersToOldMembers(cotatoUpdateActiveMemberToOldMemberRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.updateActiveMembersToOldMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CotatoUpdateOldMemberRoleRequest} cotatoUpdateOldMemberRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOldMemberToActiveGeneration(cotatoUpdateOldMemberRoleRequest: CotatoUpdateOldMemberRoleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOldMemberToActiveGeneration(cotatoUpdateOldMemberRoleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.updateOldMemberToActiveGeneration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminControllerApi - factory interface
 * @export
 */
export const AdminControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {AdminControllerApiApproveApplicantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveApplicant(requestParameters: AdminControllerApiApproveApplicantRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.approveApplicant(requestParameters.cotatoMemberApproveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findApplicantList(options?: RawAxiosRequestConfig): AxiosPromise<Array<CotatoApplyMemberInfoResponse>> {
            return localVarFp.findApplicantList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCurrentActiveMembers(options?: RawAxiosRequestConfig): AxiosPromise<Array<CotatoMemberEnrollInfoResponse>> {
            return localVarFp.findCurrentActiveMembers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOldMembers(options?: RawAxiosRequestConfig): AxiosPromise<Array<CotatoMemberEnrollInfoResponse>> {
            return localVarFp.findOldMembers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRejectApplicantList(options?: RawAxiosRequestConfig): AxiosPromise<Array<CotatoApplyMemberInfoResponse>> {
            return localVarFp.findRejectApplicantList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdminControllerApiReapproveApplicantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reapproveApplicant(requestParameters: AdminControllerApiReapproveApplicantRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.reapproveApplicant(requestParameters.cotatoMemberApproveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdminControllerApiRejectApplicantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectApplicant(requestParameters: AdminControllerApiRejectApplicantRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rejectApplicant(requestParameters.cotatoMemberRejectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdminControllerApiUpdateActiveMemberRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateActiveMemberRole(requestParameters: AdminControllerApiUpdateActiveMemberRoleRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateActiveMemberRole(requestParameters.cotatoUpdateActiveMemberRoleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdminControllerApiUpdateActiveMembersToOldMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateActiveMembersToOldMembers(requestParameters: AdminControllerApiUpdateActiveMembersToOldMembersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateActiveMembersToOldMembers(requestParameters.cotatoUpdateActiveMemberToOldMemberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdminControllerApiUpdateOldMemberToActiveGenerationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOldMemberToActiveGeneration(requestParameters: AdminControllerApiUpdateOldMemberToActiveGenerationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateOldMemberToActiveGeneration(requestParameters.cotatoUpdateOldMemberRoleRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approveApplicant operation in AdminControllerApi.
 * @export
 * @interface AdminControllerApiApproveApplicantRequest
 */
export interface AdminControllerApiApproveApplicantRequest {
    /**
     * 
     * @type {CotatoMemberApproveRequest}
     * @memberof AdminControllerApiApproveApplicant
     */
    readonly cotatoMemberApproveRequest: CotatoMemberApproveRequest
}

/**
 * Request parameters for reapproveApplicant operation in AdminControllerApi.
 * @export
 * @interface AdminControllerApiReapproveApplicantRequest
 */
export interface AdminControllerApiReapproveApplicantRequest {
    /**
     * 
     * @type {CotatoMemberApproveRequest}
     * @memberof AdminControllerApiReapproveApplicant
     */
    readonly cotatoMemberApproveRequest: CotatoMemberApproveRequest
}

/**
 * Request parameters for rejectApplicant operation in AdminControllerApi.
 * @export
 * @interface AdminControllerApiRejectApplicantRequest
 */
export interface AdminControllerApiRejectApplicantRequest {
    /**
     * 
     * @type {CotatoMemberRejectRequest}
     * @memberof AdminControllerApiRejectApplicant
     */
    readonly cotatoMemberRejectRequest: CotatoMemberRejectRequest
}

/**
 * Request parameters for updateActiveMemberRole operation in AdminControllerApi.
 * @export
 * @interface AdminControllerApiUpdateActiveMemberRoleRequest
 */
export interface AdminControllerApiUpdateActiveMemberRoleRequest {
    /**
     * 
     * @type {CotatoUpdateActiveMemberRoleRequest}
     * @memberof AdminControllerApiUpdateActiveMemberRole
     */
    readonly cotatoUpdateActiveMemberRoleRequest: CotatoUpdateActiveMemberRoleRequest
}

/**
 * Request parameters for updateActiveMembersToOldMembers operation in AdminControllerApi.
 * @export
 * @interface AdminControllerApiUpdateActiveMembersToOldMembersRequest
 */
export interface AdminControllerApiUpdateActiveMembersToOldMembersRequest {
    /**
     * 
     * @type {CotatoUpdateActiveMemberToOldMemberRequest}
     * @memberof AdminControllerApiUpdateActiveMembersToOldMembers
     */
    readonly cotatoUpdateActiveMemberToOldMemberRequest: CotatoUpdateActiveMemberToOldMemberRequest
}

/**
 * Request parameters for updateOldMemberToActiveGeneration operation in AdminControllerApi.
 * @export
 * @interface AdminControllerApiUpdateOldMemberToActiveGenerationRequest
 */
export interface AdminControllerApiUpdateOldMemberToActiveGenerationRequest {
    /**
     * 
     * @type {CotatoUpdateOldMemberRoleRequest}
     * @memberof AdminControllerApiUpdateOldMemberToActiveGeneration
     */
    readonly cotatoUpdateOldMemberRoleRequest: CotatoUpdateOldMemberRoleRequest
}

/**
 * AdminControllerApi - object-oriented interface
 * @export
 * @class AdminControllerApi
 * @extends {BaseAPI}
 */
export class AdminControllerApi extends BaseAPI {
    /**
     * 
     * @param {AdminControllerApiApproveApplicantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public approveApplicant(requestParameters: AdminControllerApiApproveApplicantRequest, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).approveApplicant(requestParameters.cotatoMemberApproveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public findApplicantList(options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).findApplicantList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public findCurrentActiveMembers(options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).findCurrentActiveMembers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public findOldMembers(options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).findOldMembers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public findRejectApplicantList(options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).findRejectApplicantList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminControllerApiReapproveApplicantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public reapproveApplicant(requestParameters: AdminControllerApiReapproveApplicantRequest, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).reapproveApplicant(requestParameters.cotatoMemberApproveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminControllerApiRejectApplicantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public rejectApplicant(requestParameters: AdminControllerApiRejectApplicantRequest, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).rejectApplicant(requestParameters.cotatoMemberRejectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminControllerApiUpdateActiveMemberRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public updateActiveMemberRole(requestParameters: AdminControllerApiUpdateActiveMemberRoleRequest, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).updateActiveMemberRole(requestParameters.cotatoUpdateActiveMemberRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminControllerApiUpdateActiveMembersToOldMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public updateActiveMembersToOldMembers(requestParameters: AdminControllerApiUpdateActiveMembersToOldMembersRequest, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).updateActiveMembersToOldMembers(requestParameters.cotatoUpdateActiveMemberToOldMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminControllerApiUpdateOldMemberToActiveGenerationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public updateOldMemberToActiveGeneration(requestParameters: AdminControllerApiUpdateOldMemberToActiveGenerationRequest, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).updateOldMemberToActiveGeneration(requestParameters.cotatoUpdateOldMemberRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

