/* tslint:disable */
/* eslint-disable */
/**
 * CS-QUIZ 프로젝트 API 명세서
 * quiz api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { CotatoAttendanceDeadLineDto } from './CotatoAttendanceDeadLineDto.js';
import {
    CotatoAttendanceDeadLineDtoFromJSON,
    CotatoAttendanceDeadLineDtoFromJSONTyped,
    CotatoAttendanceDeadLineDtoToJSON,
} from './CotatoAttendanceDeadLineDto.js';
import type { CotatoLocation } from './CotatoLocation.js';
import {
    CotatoLocationFromJSON,
    CotatoLocationFromJSONTyped,
    CotatoLocationToJSON,
} from './CotatoLocation.js';

/**
 * 
 * @export
 * @interface CotatoUpdateSessionRequest
 */
export interface CotatoUpdateSessionRequest {
    /**
     * 
     * @type {number}
     * @memberof CotatoUpdateSessionRequest
     */
    sessionId: number;
    /**
     * 
     * @type {string}
     * @memberof CotatoUpdateSessionRequest
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CotatoUpdateSessionRequest
     */
    description?: string;
    /**
     * 
     * @type {Date}
     * @memberof CotatoUpdateSessionRequest
     */
    sessionDateTime: Date;
    /**
     * 
     * @type {string}
     * @memberof CotatoUpdateSessionRequest
     */
    placeName?: string;
    /**
     * 
     * @type {CotatoLocation}
     * @memberof CotatoUpdateSessionRequest
     */
    location?: CotatoLocation;
    /**
     * 
     * @type {CotatoAttendanceDeadLineDto}
     * @memberof CotatoUpdateSessionRequest
     */
    attendTime?: CotatoAttendanceDeadLineDto;
    /**
     * 
     * @type {string}
     * @memberof CotatoUpdateSessionRequest
     */
    itIssue: CotatoUpdateSessionRequestItIssueEnum;
    /**
     * 
     * @type {string}
     * @memberof CotatoUpdateSessionRequest
     */
    networking: CotatoUpdateSessionRequestNetworkingEnum;
    /**
     * 
     * @type {string}
     * @memberof CotatoUpdateSessionRequest
     */
    csEducation: CotatoUpdateSessionRequestCsEducationEnum;
    /**
     * 
     * @type {string}
     * @memberof CotatoUpdateSessionRequest
     */
    devTalk: CotatoUpdateSessionRequestDevTalkEnum;
}


/**
 * @export
 */
export const CotatoUpdateSessionRequestItIssueEnum = {
    On: 'IT_ON',
    Off: 'IT_OFF'
} as const;
export type CotatoUpdateSessionRequestItIssueEnum = typeof CotatoUpdateSessionRequestItIssueEnum[keyof typeof CotatoUpdateSessionRequestItIssueEnum];

/**
 * @export
 */
export const CotatoUpdateSessionRequestNetworkingEnum = {
    On: 'NW_ON',
    Off: 'NW_OFF'
} as const;
export type CotatoUpdateSessionRequestNetworkingEnum = typeof CotatoUpdateSessionRequestNetworkingEnum[keyof typeof CotatoUpdateSessionRequestNetworkingEnum];

/**
 * @export
 */
export const CotatoUpdateSessionRequestCsEducationEnum = {
    On: 'CS_ON',
    Off: 'CS_OFF'
} as const;
export type CotatoUpdateSessionRequestCsEducationEnum = typeof CotatoUpdateSessionRequestCsEducationEnum[keyof typeof CotatoUpdateSessionRequestCsEducationEnum];

/**
 * @export
 */
export const CotatoUpdateSessionRequestDevTalkEnum = {
    On: 'DEVTALK_ON',
    Off: 'DEVTALK_OFF'
} as const;
export type CotatoUpdateSessionRequestDevTalkEnum = typeof CotatoUpdateSessionRequestDevTalkEnum[keyof typeof CotatoUpdateSessionRequestDevTalkEnum];


/**
 * Check if a given object implements the CotatoUpdateSessionRequest interface.
 */
export function instanceOfCotatoUpdateSessionRequest(value: object): value is CotatoUpdateSessionRequest {
    if (!('sessionId' in value) || value['sessionId'] === undefined) return false;
    if (!('sessionDateTime' in value) || value['sessionDateTime'] === undefined) return false;
    if (!('itIssue' in value) || value['itIssue'] === undefined) return false;
    if (!('networking' in value) || value['networking'] === undefined) return false;
    if (!('csEducation' in value) || value['csEducation'] === undefined) return false;
    if (!('devTalk' in value) || value['devTalk'] === undefined) return false;
    return true;
}

export function CotatoUpdateSessionRequestFromJSON(json: any): CotatoUpdateSessionRequest {
    return CotatoUpdateSessionRequestFromJSONTyped(json, false);
}

export function CotatoUpdateSessionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CotatoUpdateSessionRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'sessionId': json['sessionId'],
        'title': json['title'] == null ? undefined : json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'sessionDateTime': (new Date(json['sessionDateTime'])),
        'placeName': json['placeName'] == null ? undefined : json['placeName'],
        'location': json['location'] == null ? undefined : CotatoLocationFromJSON(json['location']),
        'attendTime': json['attendTime'] == null ? undefined : CotatoAttendanceDeadLineDtoFromJSON(json['attendTime']),
        'itIssue': json['itIssue'],
        'networking': json['networking'],
        'csEducation': json['csEducation'],
        'devTalk': json['devTalk'],
    };
}

export function CotatoUpdateSessionRequestToJSON(value?: CotatoUpdateSessionRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'sessionId': value['sessionId'],
        'title': value['title'],
        'description': value['description'],
        'sessionDateTime': ((value['sessionDateTime']).toISOString()),
        'placeName': value['placeName'],
        'location': CotatoLocationToJSON(value['location']),
        'attendTime': CotatoAttendanceDeadLineDtoToJSON(value['attendTime']),
        'itIssue': value['itIssue'],
        'networking': value['networking'],
        'csEducation': value['csEducation'],
        'devTalk': value['devTalk'],
    };
}

