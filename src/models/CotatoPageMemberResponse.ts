/* tslint:disable */
/* eslint-disable */
/**
 * COTATO 프로젝트 API 명세서
 * api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { CotatoMemberResponse } from './CotatoMemberResponse.js';
import {
    CotatoMemberResponseFromJSON,
    CotatoMemberResponseFromJSONTyped,
    CotatoMemberResponseToJSON,
} from './CotatoMemberResponse.js';
import type { CotatoSortObject } from './CotatoSortObject.js';
import {
    CotatoSortObjectFromJSON,
    CotatoSortObjectFromJSONTyped,
    CotatoSortObjectToJSON,
} from './CotatoSortObject.js';
import type { CotatoPageableObject } from './CotatoPageableObject.js';
import {
    CotatoPageableObjectFromJSON,
    CotatoPageableObjectFromJSONTyped,
    CotatoPageableObjectToJSON,
} from './CotatoPageableObject.js';

/**
 * 
 * @export
 * @interface CotatoPageMemberResponse
 */
export interface CotatoPageMemberResponse {
    /**
     * 
     * @type {number}
     * @memberof CotatoPageMemberResponse
     */
    totalPages?: number;
    /**
     * 
     * @type {number}
     * @memberof CotatoPageMemberResponse
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof CotatoPageMemberResponse
     */
    size?: number;
    /**
     * 
     * @type {Array<CotatoMemberResponse>}
     * @memberof CotatoPageMemberResponse
     */
    content?: Array<CotatoMemberResponse>;
    /**
     * 
     * @type {number}
     * @memberof CotatoPageMemberResponse
     */
    number?: number;
    /**
     * 
     * @type {CotatoSortObject}
     * @memberof CotatoPageMemberResponse
     */
    sort?: CotatoSortObject;
    /**
     * 
     * @type {number}
     * @memberof CotatoPageMemberResponse
     */
    numberOfElements?: number;
    /**
     * 
     * @type {CotatoPageableObject}
     * @memberof CotatoPageMemberResponse
     */
    pageable?: CotatoPageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof CotatoPageMemberResponse
     */
    first?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CotatoPageMemberResponse
     */
    last?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CotatoPageMemberResponse
     */
    empty?: boolean;
}

/**
 * Check if a given object implements the CotatoPageMemberResponse interface.
 */
export function instanceOfCotatoPageMemberResponse(value: object): value is CotatoPageMemberResponse {
    return true;
}

export function CotatoPageMemberResponseFromJSON(json: any): CotatoPageMemberResponse {
    return CotatoPageMemberResponseFromJSONTyped(json, false);
}

export function CotatoPageMemberResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CotatoPageMemberResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'totalPages': json['totalPages'] == null ? undefined : json['totalPages'],
        'totalElements': json['totalElements'] == null ? undefined : json['totalElements'],
        'size': json['size'] == null ? undefined : json['size'],
        'content': json['content'] == null ? undefined : ((json['content'] as Array<any>).map(CotatoMemberResponseFromJSON)),
        'number': json['number'] == null ? undefined : json['number'],
        'sort': json['sort'] == null ? undefined : CotatoSortObjectFromJSON(json['sort']),
        'numberOfElements': json['numberOfElements'] == null ? undefined : json['numberOfElements'],
        'pageable': json['pageable'] == null ? undefined : CotatoPageableObjectFromJSON(json['pageable']),
        'first': json['first'] == null ? undefined : json['first'],
        'last': json['last'] == null ? undefined : json['last'],
        'empty': json['empty'] == null ? undefined : json['empty'],
    };
}

export function CotatoPageMemberResponseToJSON(value?: CotatoPageMemberResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'totalPages': value['totalPages'],
        'totalElements': value['totalElements'],
        'size': value['size'],
        'content': value['content'] == null ? undefined : ((value['content'] as Array<any>).map(CotatoMemberResponseToJSON)),
        'number': value['number'],
        'sort': CotatoSortObjectToJSON(value['sort']),
        'numberOfElements': value['numberOfElements'],
        'pageable': CotatoPageableObjectToJSON(value['pageable']),
        'first': value['first'],
        'last': value['last'],
        'empty': value['empty'],
    };
}

