/* tslint:disable */
/* eslint-disable */
/**
 * COTATO 프로젝트 API 명세서
 * api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { CotatoSessionContents } from './CotatoSessionContents.js';
import {
    CotatoSessionContentsFromJSON,
    CotatoSessionContentsFromJSONTyped,
    CotatoSessionContentsToJSON,
} from './CotatoSessionContents.js';
import type { CotatoAttendanceTimeResponse } from './CotatoAttendanceTimeResponse.js';
import {
    CotatoAttendanceTimeResponseFromJSON,
    CotatoAttendanceTimeResponseFromJSONTyped,
    CotatoAttendanceTimeResponseToJSON,
} from './CotatoAttendanceTimeResponse.js';
import type { CotatoSessionListImageInfoResponse } from './CotatoSessionListImageInfoResponse.js';
import {
    CotatoSessionListImageInfoResponseFromJSON,
    CotatoSessionListImageInfoResponseFromJSONTyped,
    CotatoSessionListImageInfoResponseToJSON,
} from './CotatoSessionListImageInfoResponse.js';

/**
 * 
 * @export
 * @interface CotatoSessionWithAttendanceResponse
 */
export interface CotatoSessionWithAttendanceResponse {
    /**
     * 
     * @type {number}
     * @memberof CotatoSessionWithAttendanceResponse
     */
    sessionId: number;
    /**
     * 
     * @type {number}
     * @memberof CotatoSessionWithAttendanceResponse
     */
    sessionNumber: number;
    /**
     * 
     * @type {string}
     * @memberof CotatoSessionWithAttendanceResponse
     */
    title?: string;
    /**
     * 
     * @type {Array<CotatoSessionListImageInfoResponse>}
     * @memberof CotatoSessionWithAttendanceResponse
     */
    sessionImages?: Array<CotatoSessionListImageInfoResponse>;
    /**
     * 
     * @type {string}
     * @memberof CotatoSessionWithAttendanceResponse
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof CotatoSessionWithAttendanceResponse
     */
    generationId: number;
    /**
     * 
     * @type {string}
     * @memberof CotatoSessionWithAttendanceResponse
     */
    placeName?: string;
    /**
     * 
     * @type {Date}
     * @memberof CotatoSessionWithAttendanceResponse
     */
    sessionDateTime?: Date;
    /**
     * 
     * @type {CotatoSessionContents}
     * @memberof CotatoSessionWithAttendanceResponse
     */
    sessionContents?: CotatoSessionContents;
    /**
     * 
     * @type {boolean}
     * @memberof CotatoSessionWithAttendanceResponse
     */
    isOffline?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CotatoSessionWithAttendanceResponse
     */
    isOnline?: boolean;
    /**
     * 
     * @type {CotatoAttendanceTimeResponse}
     * @memberof CotatoSessionWithAttendanceResponse
     */
    attendance?: CotatoAttendanceTimeResponse;
}

/**
 * Check if a given object implements the CotatoSessionWithAttendanceResponse interface.
 */
export function instanceOfCotatoSessionWithAttendanceResponse(value: object): value is CotatoSessionWithAttendanceResponse {
    if (!('sessionId' in value) || value['sessionId'] === undefined) return false;
    if (!('sessionNumber' in value) || value['sessionNumber'] === undefined) return false;
    if (!('generationId' in value) || value['generationId'] === undefined) return false;
    return true;
}

export function CotatoSessionWithAttendanceResponseFromJSON(json: any): CotatoSessionWithAttendanceResponse {
    return CotatoSessionWithAttendanceResponseFromJSONTyped(json, false);
}

export function CotatoSessionWithAttendanceResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CotatoSessionWithAttendanceResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'sessionId': json['sessionId'],
        'sessionNumber': json['sessionNumber'],
        'title': json['title'] == null ? undefined : json['title'],
        'sessionImages': json['sessionImages'] == null ? undefined : ((json['sessionImages'] as Array<any>).map(CotatoSessionListImageInfoResponseFromJSON)),
        'description': json['description'] == null ? undefined : json['description'],
        'generationId': json['generationId'],
        'placeName': json['placeName'] == null ? undefined : json['placeName'],
        'sessionDateTime': json['sessionDateTime'] == null ? undefined : (new Date(json['sessionDateTime'])),
        'sessionContents': json['sessionContents'] == null ? undefined : CotatoSessionContentsFromJSON(json['sessionContents']),
        'isOffline': json['isOffline'] == null ? undefined : json['isOffline'],
        'isOnline': json['isOnline'] == null ? undefined : json['isOnline'],
        'attendance': json['attendance'] == null ? undefined : CotatoAttendanceTimeResponseFromJSON(json['attendance']),
    };
}

export function CotatoSessionWithAttendanceResponseToJSON(value?: CotatoSessionWithAttendanceResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'sessionId': value['sessionId'],
        'sessionNumber': value['sessionNumber'],
        'title': value['title'],
        'sessionImages': value['sessionImages'] == null ? undefined : ((value['sessionImages'] as Array<any>).map(CotatoSessionListImageInfoResponseToJSON)),
        'description': value['description'],
        'generationId': value['generationId'],
        'placeName': value['placeName'],
        'sessionDateTime': value['sessionDateTime'] == null ? undefined : ((value['sessionDateTime']).toISOString()),
        'sessionContents': CotatoSessionContentsToJSON(value['sessionContents']),
        'isOffline': value['isOffline'],
        'isOnline': value['isOnline'],
        'attendance': CotatoAttendanceTimeResponseToJSON(value['attendance']),
    };
}

