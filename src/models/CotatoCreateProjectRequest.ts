/* tslint:disable */
/* eslint-disable */
/**
 * CS-QUIZ 프로젝트 API 명세서
 * quiz api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { CotatoProjectMemberRequest } from './CotatoProjectMemberRequest.js';
import {
    CotatoProjectMemberRequestFromJSON,
    CotatoProjectMemberRequestFromJSONTyped,
    CotatoProjectMemberRequestToJSON,
} from './CotatoProjectMemberRequest.js';

/**
 * 
 * @export
 * @interface CotatoCreateProjectRequest
 */
export interface CotatoCreateProjectRequest {
    /**
     * 
     * @type {number}
     * @memberof CotatoCreateProjectRequest
     */
    generationNumber: number;
    /**
     * 
     * @type {string}
     * @memberof CotatoCreateProjectRequest
     */
    projectName: string;
    /**
     * 
     * @type {string}
     * @memberof CotatoCreateProjectRequest
     */
    projectIntroduction?: string;
    /**
     * 
     * @type {string}
     * @memberof CotatoCreateProjectRequest
     */
    githubUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof CotatoCreateProjectRequest
     */
    behanceUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof CotatoCreateProjectRequest
     */
    projectUrl?: string;
    /**
     * 
     * @type {Array<CotatoProjectMemberRequest>}
     * @memberof CotatoCreateProjectRequest
     */
    members: Array<CotatoProjectMemberRequest>;
}

/**
 * Check if a given object implements the CotatoCreateProjectRequest interface.
 */
export function instanceOfCotatoCreateProjectRequest(value: object): value is CotatoCreateProjectRequest {
    if (!('generationNumber' in value) || value['generationNumber'] === undefined) return false;
    if (!('projectName' in value) || value['projectName'] === undefined) return false;
    if (!('members' in value) || value['members'] === undefined) return false;
    return true;
}

export function CotatoCreateProjectRequestFromJSON(json: any): CotatoCreateProjectRequest {
    return CotatoCreateProjectRequestFromJSONTyped(json, false);
}

export function CotatoCreateProjectRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CotatoCreateProjectRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'generationNumber': json['generationNumber'],
        'projectName': json['projectName'],
        'projectIntroduction': json['projectIntroduction'] == null ? undefined : json['projectIntroduction'],
        'githubUrl': json['githubUrl'] == null ? undefined : json['githubUrl'],
        'behanceUrl': json['behanceUrl'] == null ? undefined : json['behanceUrl'],
        'projectUrl': json['projectUrl'] == null ? undefined : json['projectUrl'],
        'members': ((json['members'] as Array<any>).map(CotatoProjectMemberRequestFromJSON)),
    };
}

export function CotatoCreateProjectRequestToJSON(value?: CotatoCreateProjectRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'generationNumber': value['generationNumber'],
        'projectName': value['projectName'],
        'projectIntroduction': value['projectIntroduction'],
        'githubUrl': value['githubUrl'],
        'behanceUrl': value['behanceUrl'],
        'projectUrl': value['projectUrl'],
        'members': ((value['members'] as Array<any>).map(CotatoProjectMemberRequestToJSON)),
    };
}

