/* tslint:disable */
/* eslint-disable */
/**
 * COTATO 프로젝트 API 명세서
 * api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { CotatoProfileLinkResponse } from './CotatoProfileLinkResponse.js';
import {
    CotatoProfileLinkResponseFromJSON,
    CotatoProfileLinkResponseFromJSONTyped,
    CotatoProfileLinkResponseToJSON,
} from './CotatoProfileLinkResponse.js';

/**
 * 
 * @export
 * @interface CotatoProfileInfoResponse
 */
export interface CotatoProfileInfoResponse {
    /**
     * 멤버 pk
     * @type {number}
     * @memberof CotatoProfileInfoResponse
     */
    memberId: number;
    /**
     * 멤버 이름
     * @type {string}
     * @memberof CotatoProfileInfoResponse
     */
    name: string;
    /**
     * 합격 기수
     * @type {number}
     * @memberof CotatoProfileInfoResponse
     */
    generationNumber: number;
    /**
     * 멤버 포지션
     * @type {string}
     * @memberof CotatoProfileInfoResponse
     */
    position: CotatoProfileInfoResponsePositionEnum;
    /**
     * 프로필 사진
     * @type {string}
     * @memberof CotatoProfileInfoResponse
     */
    profileImage: string | null;
    /**
     * 자기 소개
     * @type {string}
     * @memberof CotatoProfileInfoResponse
     */
    introduction: string | null;
    /**
     * 대학교
     * @type {string}
     * @memberof CotatoProfileInfoResponse
     */
    university: string | null;
    /**
     * 프로필 링크
     * @type {Array<CotatoProfileLinkResponse>}
     * @memberof CotatoProfileInfoResponse
     */
    profileLinks: Array<CotatoProfileLinkResponse>;
}


/**
 * @export
 */
export const CotatoProfileInfoResponsePositionEnum = {
    None: 'NONE',
    Be: 'BE',
    Fe: 'FE',
    Design: 'DESIGN',
    Pm: 'PM'
} as const;
export type CotatoProfileInfoResponsePositionEnum = typeof CotatoProfileInfoResponsePositionEnum[keyof typeof CotatoProfileInfoResponsePositionEnum];


/**
 * Check if a given object implements the CotatoProfileInfoResponse interface.
 */
export function instanceOfCotatoProfileInfoResponse(value: object): value is CotatoProfileInfoResponse {
    if (!('memberId' in value) || value['memberId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('generationNumber' in value) || value['generationNumber'] === undefined) return false;
    if (!('position' in value) || value['position'] === undefined) return false;
    if (!('profileImage' in value) || value['profileImage'] === undefined) return false;
    if (!('introduction' in value) || value['introduction'] === undefined) return false;
    if (!('university' in value) || value['university'] === undefined) return false;
    if (!('profileLinks' in value) || value['profileLinks'] === undefined) return false;
    return true;
}

export function CotatoProfileInfoResponseFromJSON(json: any): CotatoProfileInfoResponse {
    return CotatoProfileInfoResponseFromJSONTyped(json, false);
}

export function CotatoProfileInfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CotatoProfileInfoResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'memberId': json['memberId'],
        'name': json['name'],
        'generationNumber': json['generationNumber'],
        'position': json['position'],
        'profileImage': json['profileImage'],
        'introduction': json['introduction'],
        'university': json['university'],
        'profileLinks': ((json['profileLinks'] as Array<any>).map(CotatoProfileLinkResponseFromJSON)),
    };
}

export function CotatoProfileInfoResponseToJSON(value?: CotatoProfileInfoResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'memberId': value['memberId'],
        'name': value['name'],
        'generationNumber': value['generationNumber'],
        'position': value['position'],
        'profileImage': value['profileImage'],
        'introduction': value['introduction'],
        'university': value['university'],
        'profileLinks': ((value['profileLinks'] as Array<any>).map(CotatoProfileLinkResponseToJSON)),
    };
}

