/* tslint:disable */
/* eslint-disable */
/**
 * COTATO 프로젝트 API 명세서
 * api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { CotatoLocation } from './CotatoLocation.js';
import {
    CotatoLocationFromJSON,
    CotatoLocationFromJSONTyped,
    CotatoLocationToJSON,
} from './CotatoLocation.js';

/**
 * 
 * @export
 * @interface CotatoAttendanceResponse
 */
export interface CotatoAttendanceResponse {
    /**
     * 출석 PK
     * @type {number}
     * @memberof CotatoAttendanceResponse
     */
    attendanceId: number;
    /**
     * 출석 마감 시간
     * @type {Date}
     * @memberof CotatoAttendanceResponse
     */
    attendanceDeadLine: Date;
    /**
     * 지각 마감 시간
     * @type {Date}
     * @memberof CotatoAttendanceResponse
     */
    lateDeadLine: Date;
    /**
     * 
     * @type {CotatoLocation}
     * @memberof CotatoAttendanceResponse
     */
    location?: CotatoLocation;
    /**
     * 세션 PK
     * @type {number}
     * @memberof CotatoAttendanceResponse
     */
    sessionId: number;
    /**
     * 세션 타이틀
     * @type {string}
     * @memberof CotatoAttendanceResponse
     */
    sessionTitle: string;
    /**
     * 출결 옵션
     * @type {string}
     * @memberof CotatoAttendanceResponse
     */
    sessionType: CotatoAttendanceResponseSessionTypeEnum;
    /**
     * 출석 오픈 상태
     * @type {string}
     * @memberof CotatoAttendanceResponse
     */
    openStatus: CotatoAttendanceResponseOpenStatusEnum;
}


/**
 * @export
 */
export const CotatoAttendanceResponseSessionTypeEnum = {
    NoAttend: 'NO_ATTEND',
    Online: 'ONLINE',
    Offline: 'OFFLINE',
    All: 'ALL'
} as const;
export type CotatoAttendanceResponseSessionTypeEnum = typeof CotatoAttendanceResponseSessionTypeEnum[keyof typeof CotatoAttendanceResponseSessionTypeEnum];

/**
 * @export
 */
export const CotatoAttendanceResponseOpenStatusEnum = {
    Closed: 'CLOSED',
    Open: 'OPEN',
    Late: 'LATE',
    Absent: 'ABSENT',
    Before: 'BEFORE'
} as const;
export type CotatoAttendanceResponseOpenStatusEnum = typeof CotatoAttendanceResponseOpenStatusEnum[keyof typeof CotatoAttendanceResponseOpenStatusEnum];


/**
 * Check if a given object implements the CotatoAttendanceResponse interface.
 */
export function instanceOfCotatoAttendanceResponse(value: object): value is CotatoAttendanceResponse {
    if (!('attendanceId' in value) || value['attendanceId'] === undefined) return false;
    if (!('attendanceDeadLine' in value) || value['attendanceDeadLine'] === undefined) return false;
    if (!('lateDeadLine' in value) || value['lateDeadLine'] === undefined) return false;
    if (!('sessionId' in value) || value['sessionId'] === undefined) return false;
    if (!('sessionTitle' in value) || value['sessionTitle'] === undefined) return false;
    if (!('sessionType' in value) || value['sessionType'] === undefined) return false;
    if (!('openStatus' in value) || value['openStatus'] === undefined) return false;
    return true;
}

export function CotatoAttendanceResponseFromJSON(json: any): CotatoAttendanceResponse {
    return CotatoAttendanceResponseFromJSONTyped(json, false);
}

export function CotatoAttendanceResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CotatoAttendanceResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'attendanceId': json['attendanceId'],
        'attendanceDeadLine': (new Date(json['attendanceDeadLine'])),
        'lateDeadLine': (new Date(json['lateDeadLine'])),
        'location': json['location'] == null ? undefined : CotatoLocationFromJSON(json['location']),
        'sessionId': json['sessionId'],
        'sessionTitle': json['sessionTitle'],
        'sessionType': json['sessionType'],
        'openStatus': json['openStatus'],
    };
}

export function CotatoAttendanceResponseToJSON(value?: CotatoAttendanceResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'attendanceId': value['attendanceId'],
        'attendanceDeadLine': ((value['attendanceDeadLine']).toISOString()),
        'lateDeadLine': ((value['lateDeadLine']).toISOString()),
        'location': CotatoLocationToJSON(value['location']),
        'sessionId': value['sessionId'],
        'sessionTitle': value['sessionTitle'],
        'sessionType': value['sessionType'],
        'openStatus': value['openStatus'],
    };
}

