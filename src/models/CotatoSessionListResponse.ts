/* tslint:disable */
/* eslint-disable */
/**
 * CS-QUIZ 프로젝트 API 명세서
 * quiz api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { CotatoSessionContents } from './CotatoSessionContents.js';
import {
    CotatoSessionContentsFromJSON,
    CotatoSessionContentsFromJSONTyped,
    CotatoSessionContentsToJSON,
} from './CotatoSessionContents.js';
import type { CotatoSessionListImageInfoResponse } from './CotatoSessionListImageInfoResponse.js';
import {
    CotatoSessionListImageInfoResponseFromJSON,
    CotatoSessionListImageInfoResponseFromJSONTyped,
    CotatoSessionListImageInfoResponseToJSON,
} from './CotatoSessionListImageInfoResponse.js';

/**
 * 
 * @export
 * @interface CotatoSessionListResponse
 */
export interface CotatoSessionListResponse {
    /**
     * 
     * @type {number}
     * @memberof CotatoSessionListResponse
     */
    sessionId?: number;
    /**
     * 
     * @type {number}
     * @memberof CotatoSessionListResponse
     */
    sessionNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof CotatoSessionListResponse
     */
    title?: string;
    /**
     * 
     * @type {Array<CotatoSessionListImageInfoResponse>}
     * @memberof CotatoSessionListResponse
     */
    imageInfos?: Array<CotatoSessionListImageInfoResponse>;
    /**
     * 
     * @type {string}
     * @memberof CotatoSessionListResponse
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof CotatoSessionListResponse
     */
    generationId?: number;
    /**
     * 
     * @type {string}
     * @memberof CotatoSessionListResponse
     */
    placeName?: string;
    /**
     * 
     * @type {Date}
     * @memberof CotatoSessionListResponse
     */
    sessionDateTime?: Date;
    /**
     * 
     * @type {CotatoSessionContents}
     * @memberof CotatoSessionListResponse
     */
    sessionContents?: CotatoSessionContents;
}

/**
 * Check if a given object implements the CotatoSessionListResponse interface.
 */
export function instanceOfCotatoSessionListResponse(value: object): value is CotatoSessionListResponse {
    return true;
}

export function CotatoSessionListResponseFromJSON(json: any): CotatoSessionListResponse {
    return CotatoSessionListResponseFromJSONTyped(json, false);
}

export function CotatoSessionListResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CotatoSessionListResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'sessionId': json['sessionId'] == null ? undefined : json['sessionId'],
        'sessionNumber': json['sessionNumber'] == null ? undefined : json['sessionNumber'],
        'title': json['title'] == null ? undefined : json['title'],
        'imageInfos': json['imageInfos'] == null ? undefined : ((json['imageInfos'] as Array<any>).map(CotatoSessionListImageInfoResponseFromJSON)),
        'description': json['description'] == null ? undefined : json['description'],
        'generationId': json['generationId'] == null ? undefined : json['generationId'],
        'placeName': json['placeName'] == null ? undefined : json['placeName'],
        'sessionDateTime': json['sessionDateTime'] == null ? undefined : (new Date(json['sessionDateTime'])),
        'sessionContents': json['sessionContents'] == null ? undefined : CotatoSessionContentsFromJSON(json['sessionContents']),
    };
}

export function CotatoSessionListResponseToJSON(value?: CotatoSessionListResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'sessionId': value['sessionId'],
        'sessionNumber': value['sessionNumber'],
        'title': value['title'],
        'imageInfos': value['imageInfos'] == null ? undefined : ((value['imageInfos'] as Array<any>).map(CotatoSessionListImageInfoResponseToJSON)),
        'description': value['description'],
        'generationId': value['generationId'],
        'placeName': value['placeName'],
        'sessionDateTime': value['sessionDateTime'] == null ? undefined : ((value['sessionDateTime']).toISOString()),
        'sessionContents': CotatoSessionContentsToJSON(value['sessionContents']),
    };
}

