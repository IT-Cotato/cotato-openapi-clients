/* tslint:disable */
/* eslint-disable */
/**
 * CS-QUIZ 프로젝트 API 명세서
 * quiz api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface CotatoMemberAttendResponse
 */
export interface CotatoMemberAttendResponse {
    /**
     * 세션 PK
     * @type {number}
     * @memberof CotatoMemberAttendResponse
     */
    sessionId?: number;
    /**
     * 출석 PK
     * @type {number}
     * @memberof CotatoMemberAttendResponse
     */
    attendanceId?: number;
    /**
     * 멤버 PK
     * @type {number}
     * @memberof CotatoMemberAttendResponse
     */
    memberId?: number;
    /**
     * 세션 타이틀
     * @type {string}
     * @memberof CotatoMemberAttendResponse
     */
    sessionTitle?: string;
    /**
     * 세션 날짜
     * @type {Date}
     * @memberof CotatoMemberAttendResponse
     */
    sessionDate?: Date;
    /**
     * 출결 진행 여부
     * @type {string}
     * @memberof CotatoMemberAttendResponse
     */
    isOpened?: CotatoMemberAttendResponseIsOpenedEnum;
    /**
     * 출결 형식
     * @type {string}
     * @memberof CotatoMemberAttendResponse
     */
    attendanceType?: CotatoMemberAttendResponseAttendanceTypeEnum;
    /**
     * 마감된 출석에 대한 출결 결과
     * @type {string}
     * @memberof CotatoMemberAttendResponse
     */
    attendanceResult?: CotatoMemberAttendResponseAttendanceResultEnum;
}


/**
 * @export
 */
export const CotatoMemberAttendResponseIsOpenedEnum = {
    Closed: 'CLOSED',
    Open: 'OPEN',
    Late: 'LATE',
    Absent: 'ABSENT',
    Before: 'BEFORE'
} as const;
export type CotatoMemberAttendResponseIsOpenedEnum = typeof CotatoMemberAttendResponseIsOpenedEnum[keyof typeof CotatoMemberAttendResponseIsOpenedEnum];

/**
 * @export
 */
export const CotatoMemberAttendResponseAttendanceTypeEnum = {
    Offline: 'OFFLINE',
    Online: 'ONLINE'
} as const;
export type CotatoMemberAttendResponseAttendanceTypeEnum = typeof CotatoMemberAttendResponseAttendanceTypeEnum[keyof typeof CotatoMemberAttendResponseAttendanceTypeEnum];

/**
 * @export
 */
export const CotatoMemberAttendResponseAttendanceResultEnum = {
    Present: 'PRESENT',
    Late: 'LATE',
    Absent: 'ABSENT'
} as const;
export type CotatoMemberAttendResponseAttendanceResultEnum = typeof CotatoMemberAttendResponseAttendanceResultEnum[keyof typeof CotatoMemberAttendResponseAttendanceResultEnum];


/**
 * Check if a given object implements the CotatoMemberAttendResponse interface.
 */
export function instanceOfCotatoMemberAttendResponse(value: object): value is CotatoMemberAttendResponse {
    return true;
}

export function CotatoMemberAttendResponseFromJSON(json: any): CotatoMemberAttendResponse {
    return CotatoMemberAttendResponseFromJSONTyped(json, false);
}

export function CotatoMemberAttendResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CotatoMemberAttendResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'sessionId': json['sessionId'] == null ? undefined : json['sessionId'],
        'attendanceId': json['attendanceId'] == null ? undefined : json['attendanceId'],
        'memberId': json['memberId'] == null ? undefined : json['memberId'],
        'sessionTitle': json['sessionTitle'] == null ? undefined : json['sessionTitle'],
        'sessionDate': json['sessionDate'] == null ? undefined : (new Date(json['sessionDate'])),
        'isOpened': json['isOpened'] == null ? undefined : json['isOpened'],
        'attendanceType': json['attendanceType'] == null ? undefined : json['attendanceType'],
        'attendanceResult': json['attendanceResult'] == null ? undefined : json['attendanceResult'],
    };
}

export function CotatoMemberAttendResponseToJSON(value?: CotatoMemberAttendResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'sessionId': value['sessionId'],
        'attendanceId': value['attendanceId'],
        'memberId': value['memberId'],
        'sessionTitle': value['sessionTitle'],
        'sessionDate': value['sessionDate'] == null ? undefined : ((value['sessionDate']).toISOString().substring(0,10)),
        'isOpened': value['isOpened'],
        'attendanceType': value['attendanceType'],
        'attendanceResult': value['attendanceResult'],
    };
}

