/* tslint:disable */
/* eslint-disable */
/**
 * CS-QUIZ 프로젝트 API 명세서
 * quiz api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  CotatoMemberInfoResponse,
  CotatoMemberMyPageInfoResponse,
  CotatoUpdatePasswordRequest,
  CotatoUpdatePhoneNumberRequest,
} from '../models/index.js';
import {
    CotatoMemberInfoResponseFromJSON,
    CotatoMemberInfoResponseToJSON,
    CotatoMemberMyPageInfoResponseFromJSON,
    CotatoMemberMyPageInfoResponseToJSON,
    CotatoUpdatePasswordRequestFromJSON,
    CotatoUpdatePasswordRequestToJSON,
    CotatoUpdatePhoneNumberRequestFromJSON,
    CotatoUpdatePhoneNumberRequestToJSON,
} from '../models/index.js';

export interface DeleteProfileImageRequest {
    authorization: string;
}

export interface FindMyPageInfoRequest {
    memberId: number;
}

export interface UpdatePasswordRequest {
    cotatoUpdatePasswordRequest: CotatoUpdatePasswordRequest;
}

export interface UpdatePhoneNumberRequest {
    cotatoUpdatePhoneNumberRequest: CotatoUpdatePhoneNumberRequest;
}

export interface UpdateProfileImageRequest {
    authorization: string;
    image: Blob;
}

/**
 * 
 */
export class MemberControllerApi extends runtime.BaseAPI {

    /**
     * 멤버 프로필 사진 삭제 API
     */
    async deleteProfileImageRaw(requestParameters: DeleteProfileImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling deleteProfileImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member/profile-image`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 멤버 프로필 사진 삭제 API
     */
    async deleteProfileImage(requestParameters: DeleteProfileImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProfileImageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async findMemberInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoMemberInfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoMemberInfoResponseFromJSON(jsonValue));
    }

    /**
     */
    async findMemberInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoMemberInfoResponse> {
        const response = await this.findMemberInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findMyPageInfoRaw(requestParameters: FindMyPageInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoMemberMyPageInfoResponse>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling findMyPageInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member/{memberId}/mypage`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoMemberMyPageInfoResponseFromJSON(jsonValue));
    }

    /**
     */
    async findMyPageInfo(requestParameters: FindMyPageInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoMemberMyPageInfoResponse> {
        const response = await this.findMyPageInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePasswordRaw(requestParameters: UpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cotatoUpdatePasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'cotatoUpdatePasswordRequest',
                'Required parameter "cotatoUpdatePasswordRequest" was null or undefined when calling updatePassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member/update/password`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CotatoUpdatePasswordRequestToJSON(requestParameters['cotatoUpdatePasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updatePassword(requestParameters: UpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePasswordRaw(requestParameters, initOverrides);
    }

    /**
     * 멤버 전화번호 수정 API
     */
    async updatePhoneNumberRaw(requestParameters: UpdatePhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cotatoUpdatePhoneNumberRequest'] == null) {
            throw new runtime.RequiredError(
                'cotatoUpdatePhoneNumberRequest',
                'Required parameter "cotatoUpdatePhoneNumberRequest" was null or undefined when calling updatePhoneNumber().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member/phone-number`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CotatoUpdatePhoneNumberRequestToJSON(requestParameters['cotatoUpdatePhoneNumberRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 멤버 전화번호 수정 API
     */
    async updatePhoneNumber(requestParameters: UpdatePhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePhoneNumberRaw(requestParameters, initOverrides);
    }

    /**
     * 멤버 프로필 사진 수정 API
     */
    async updateProfileImageRaw(requestParameters: UpdateProfileImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling updateProfileImage().'
            );
        }

        if (requestParameters['image'] == null) {
            throw new runtime.RequiredError(
                'image',
                'Required parameter "image" was null or undefined when calling updateProfileImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['image'] != null) {
            formParams.append('image', requestParameters['image'] as any);
        }

        const response = await this.request({
            path: `/v1/api/member/profile-image`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 멤버 프로필 사진 수정 API
     */
    async updateProfileImage(requestParameters: UpdateProfileImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateProfileImageRaw(requestParameters, initOverrides);
    }

}
