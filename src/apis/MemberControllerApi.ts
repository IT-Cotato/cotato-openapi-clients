/* tslint:disable */
/* eslint-disable */
/**
 * COTATO 프로젝트 API 명세서
 * api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  CotatoAddableMembersResponse,
  CotatoDeactivateRequest,
  CotatoMemberApproveRequest,
  CotatoMemberInfoResponse,
  CotatoMemberMyPageInfoResponse,
  CotatoProfileInfoResponse,
  CotatoUpdateActiveMemberToOldMemberRequest,
  CotatoUpdateMemberRoleRequest,
  CotatoUpdatePasswordRequest,
  CotatoUpdatePhoneNumberRequest,
  CotatoUpdateProfileInfoRequest,
} from '../models/index.js';
import {
    CotatoAddableMembersResponseFromJSON,
    CotatoAddableMembersResponseToJSON,
    CotatoDeactivateRequestFromJSON,
    CotatoDeactivateRequestToJSON,
    CotatoMemberApproveRequestFromJSON,
    CotatoMemberApproveRequestToJSON,
    CotatoMemberInfoResponseFromJSON,
    CotatoMemberInfoResponseToJSON,
    CotatoMemberMyPageInfoResponseFromJSON,
    CotatoMemberMyPageInfoResponseToJSON,
    CotatoProfileInfoResponseFromJSON,
    CotatoProfileInfoResponseToJSON,
    CotatoUpdateActiveMemberToOldMemberRequestFromJSON,
    CotatoUpdateActiveMemberToOldMemberRequestToJSON,
    CotatoUpdateMemberRoleRequestFromJSON,
    CotatoUpdateMemberRoleRequestToJSON,
    CotatoUpdatePasswordRequestFromJSON,
    CotatoUpdatePasswordRequestToJSON,
    CotatoUpdatePhoneNumberRequestFromJSON,
    CotatoUpdatePhoneNumberRequestToJSON,
    CotatoUpdateProfileInfoRequestFromJSON,
    CotatoUpdateProfileInfoRequestToJSON,
} from '../models/index.js';

export interface ActivateMemberRequest {
    memberId: number;
}

export interface ApproveApplicantRequest {
    memberId: number;
    cotatoMemberApproveRequest: CotatoMemberApproveRequest;
}

export interface DeactivateMemberRequest {
    memberId: number;
    cotatoDeactivateRequest: CotatoDeactivateRequest;
}

export interface FindAddableMembersForGenerationMember1Request {
    generationId: number;
    status: FindAddableMembersForGenerationMember1StatusEnum;
    passedGenerationNumber?: number;
    position?: FindAddableMembersForGenerationMember1PositionEnum;
    name?: string;
}

export interface FindMyPageInfoRequest {
    memberId: number;
}

export interface FindProfileInfoRequest {
    memberId: number;
}

export interface RejectApplicantRequest {
    memberId: number;
}

export interface UpdateMemberRoleRequest {
    memberId: number;
    cotatoUpdateMemberRoleRequest: CotatoUpdateMemberRoleRequest;
}

export interface UpdateMembersToOldMembersRequest {
    cotatoUpdateActiveMemberToOldMemberRequest: CotatoUpdateActiveMemberToOldMemberRequest;
}

export interface UpdatePasswordRequest {
    cotatoUpdatePasswordRequest: CotatoUpdatePasswordRequest;
}

export interface UpdatePhoneNumberRequest {
    cotatoUpdatePhoneNumberRequest: CotatoUpdatePhoneNumberRequest;
}

export interface UpdateProfileInfoRequest {
    request: CotatoUpdateProfileInfoRequest;
    profileImage?: Blob;
}

export interface UpdateToApprovedMemberRequest {
    memberId: number;
}

/**
 * 
 */
export class MemberControllerApi extends runtime.BaseAPI {

    /**
     * 멤버 활성화 API
     */
    async activateMemberRaw(requestParameters: ActivateMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling activateMember().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member/{memberId}/activate`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 멤버 활성화 API
     */
    async activateMember(requestParameters: ActivateMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.activateMemberRaw(requestParameters, initOverrides);
    }

    /**
     * 부원 가입 승인
     */
    async approveApplicantRaw(requestParameters: ApproveApplicantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling approveApplicant().'
            );
        }

        if (requestParameters['cotatoMemberApproveRequest'] == null) {
            throw new runtime.RequiredError(
                'cotatoMemberApproveRequest',
                'Required parameter "cotatoMemberApproveRequest" was null or undefined when calling approveApplicant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member/{memberId}/approve`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CotatoMemberApproveRequestToJSON(requestParameters['cotatoMemberApproveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 부원 가입 승인
     */
    async approveApplicant(requestParameters: ApproveApplicantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.approveApplicantRaw(requestParameters, initOverrides);
    }

    /**
     * 회원 비활성화 요청 API
     */
    async deactivateMemberRaw(requestParameters: DeactivateMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling deactivateMember().'
            );
        }

        if (requestParameters['cotatoDeactivateRequest'] == null) {
            throw new runtime.RequiredError(
                'cotatoDeactivateRequest',
                'Required parameter "cotatoDeactivateRequest" was null or undefined when calling deactivateMember().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member/{memberId}/deactivate`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CotatoDeactivateRequestToJSON(requestParameters['cotatoDeactivateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 회원 비활성화 요청 API
     */
    async deactivateMember(requestParameters: DeactivateMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deactivateMemberRaw(requestParameters, initOverrides);
    }

    /**
     * 회원 상태에 따른 조회 요청 API
     */
    async findAddableMembersForGenerationMember1Raw(requestParameters: FindAddableMembersForGenerationMember1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoAddableMembersResponse>> {
        if (requestParameters['generationId'] == null) {
            throw new runtime.RequiredError(
                'generationId',
                'Required parameter "generationId" was null or undefined when calling findAddableMembersForGenerationMember1().'
            );
        }

        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling findAddableMembersForGenerationMember1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['generationId'] != null) {
            queryParameters['generationId'] = requestParameters['generationId'];
        }

        if (requestParameters['passedGenerationNumber'] != null) {
            queryParameters['passedGenerationNumber'] = requestParameters['passedGenerationNumber'];
        }

        if (requestParameters['position'] != null) {
            queryParameters['position'] = requestParameters['position'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoAddableMembersResponseFromJSON(jsonValue));
    }

    /**
     * 회원 상태에 따른 조회 요청 API
     */
    async findAddableMembersForGenerationMember1(requestParameters: FindAddableMembersForGenerationMember1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoAddableMembersResponse> {
        const response = await this.findAddableMembersForGenerationMember1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findMemberInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoMemberInfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoMemberInfoResponseFromJSON(jsonValue));
    }

    /**
     */
    async findMemberInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoMemberInfoResponse> {
        const response = await this.findMemberInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findMyPageInfoRaw(requestParameters: FindMyPageInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoMemberMyPageInfoResponse>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling findMyPageInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member/{memberId}/mypage`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoMemberMyPageInfoResponseFromJSON(jsonValue));
    }

    /**
     */
    async findMyPageInfo(requestParameters: FindMyPageInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoMemberMyPageInfoResponse> {
        const response = await this.findMyPageInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 멤버 프로필 정보 반환 API
     */
    async findProfileInfoRaw(requestParameters: FindProfileInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoProfileInfoResponse>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling findProfileInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member/{memberId}/profile`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoProfileInfoResponseFromJSON(jsonValue));
    }

    /**
     * 멤버 프로필 정보 반환 API
     */
    async findProfileInfo(requestParameters: FindProfileInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoProfileInfoResponse> {
        const response = await this.findProfileInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 부원 가입 거절
     */
    async rejectApplicantRaw(requestParameters: RejectApplicantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling rejectApplicant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member/{memberId}/reject`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 부원 가입 거절
     */
    async rejectApplicant(requestParameters: RejectApplicantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rejectApplicantRaw(requestParameters, initOverrides);
    }

    /**
     * 부원 역할 변경
     */
    async updateMemberRoleRaw(requestParameters: UpdateMemberRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling updateMemberRole().'
            );
        }

        if (requestParameters['cotatoUpdateMemberRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'cotatoUpdateMemberRoleRequest',
                'Required parameter "cotatoUpdateMemberRoleRequest" was null or undefined when calling updateMemberRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member/{memberId}/role`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CotatoUpdateMemberRoleRequestToJSON(requestParameters['cotatoUpdateMemberRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 부원 역할 변경
     */
    async updateMemberRole(requestParameters: UpdateMemberRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateMemberRoleRaw(requestParameters, initOverrides);
    }

    /**
     * 부원 OM 전환
     */
    async updateMembersToOldMembersRaw(requestParameters: UpdateMembersToOldMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cotatoUpdateActiveMemberToOldMemberRequest'] == null) {
            throw new runtime.RequiredError(
                'cotatoUpdateActiveMemberToOldMemberRequest',
                'Required parameter "cotatoUpdateActiveMemberToOldMemberRequest" was null or undefined when calling updateMembersToOldMembers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member/status`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CotatoUpdateActiveMemberToOldMemberRequestToJSON(requestParameters['cotatoUpdateActiveMemberToOldMemberRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 부원 OM 전환
     */
    async updateMembersToOldMembers(requestParameters: UpdateMembersToOldMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateMembersToOldMembersRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updatePasswordRaw(requestParameters: UpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cotatoUpdatePasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'cotatoUpdatePasswordRequest',
                'Required parameter "cotatoUpdatePasswordRequest" was null or undefined when calling updatePassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member/update/password`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CotatoUpdatePasswordRequestToJSON(requestParameters['cotatoUpdatePasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updatePassword(requestParameters: UpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePasswordRaw(requestParameters, initOverrides);
    }

    /**
     * 멤버 전화번호 수정 API
     */
    async updatePhoneNumberRaw(requestParameters: UpdatePhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cotatoUpdatePhoneNumberRequest'] == null) {
            throw new runtime.RequiredError(
                'cotatoUpdatePhoneNumberRequest',
                'Required parameter "cotatoUpdatePhoneNumberRequest" was null or undefined when calling updatePhoneNumber().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member/phone-number`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CotatoUpdatePhoneNumberRequestToJSON(requestParameters['cotatoUpdatePhoneNumberRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 멤버 전화번호 수정 API
     */
    async updatePhoneNumber(requestParameters: UpdatePhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePhoneNumberRaw(requestParameters, initOverrides);
    }

    /**
     * 멤버 프로필 정보 수정 API
     */
    async updateProfileInfoRaw(requestParameters: UpdateProfileInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling updateProfileInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['request'] != null) {
            formParams.append('request', new Blob([JSON.stringify(CotatoUpdateProfileInfoRequestToJSON(requestParameters['request']))], { type: "application/json", }));
                    }

        if (requestParameters['profileImage'] != null) {
            formParams.append('profileImage', requestParameters['profileImage'] as any);
        }

        const response = await this.request({
            path: `/v1/api/member/profile`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 멤버 프로필 정보 수정 API
     */
    async updateProfileInfo(requestParameters: UpdateProfileInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateProfileInfoRaw(requestParameters, initOverrides);
    }

    /**
     * OM을 일반 부원으로 전환
     */
    async updateToApprovedMemberRaw(requestParameters: UpdateToApprovedMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling updateToApprovedMember().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/member/{memberId}/status`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * OM을 일반 부원으로 전환
     */
    async updateToApprovedMember(requestParameters: UpdateToApprovedMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateToApprovedMemberRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const FindAddableMembersForGenerationMember1StatusEnum = {
    Inactive: 'INACTIVE',
    Rejected: 'REJECTED',
    Requested: 'REQUESTED',
    Retired: 'RETIRED',
    Approved: 'APPROVED'
} as const;
export type FindAddableMembersForGenerationMember1StatusEnum = typeof FindAddableMembersForGenerationMember1StatusEnum[keyof typeof FindAddableMembersForGenerationMember1StatusEnum];
/**
 * @export
 */
export const FindAddableMembersForGenerationMember1PositionEnum = {
    None: 'NONE',
    Be: 'BE',
    Fe: 'FE',
    Design: 'DESIGN',
    Pm: 'PM'
} as const;
export type FindAddableMembersForGenerationMember1PositionEnum = typeof FindAddableMembersForGenerationMember1PositionEnum[keyof typeof FindAddableMembersForGenerationMember1PositionEnum];
