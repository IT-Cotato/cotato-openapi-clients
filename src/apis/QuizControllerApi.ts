/* tslint:disable */
/* eslint-disable */
/**
 * CS-QUIZ 프로젝트 API 명세서
 * quiz api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  CotatoAddAdditionalAnswerRequest,
  CotatoAllQuizzesInCsQuizResponse,
  CotatoAllQuizzesResponse,
  CotatoCreateMultipleQuizRequest,
  CotatoCreateShortQuizRequest,
  CotatoQuizInfoInCsQuizResponse,
  CotatoQuizResponse,
  CotatoQuizResultInfo,
} from '../models/index.js';
import {
    CotatoAddAdditionalAnswerRequestFromJSON,
    CotatoAddAdditionalAnswerRequestToJSON,
    CotatoAllQuizzesInCsQuizResponseFromJSON,
    CotatoAllQuizzesInCsQuizResponseToJSON,
    CotatoAllQuizzesResponseFromJSON,
    CotatoAllQuizzesResponseToJSON,
    CotatoCreateMultipleQuizRequestFromJSON,
    CotatoCreateMultipleQuizRequestToJSON,
    CotatoCreateShortQuizRequestFromJSON,
    CotatoCreateShortQuizRequestToJSON,
    CotatoQuizInfoInCsQuizResponseFromJSON,
    CotatoQuizInfoInCsQuizResponseToJSON,
    CotatoQuizResponseFromJSON,
    CotatoQuizResponseToJSON,
    CotatoQuizResultInfoFromJSON,
    CotatoQuizResultInfoToJSON,
} from '../models/index.js';

export interface AddAdditionalAnswerRequest {
    cotatoAddAdditionalAnswerRequest: CotatoAddAdditionalAnswerRequest;
}

export interface AddAllQuizzesRequest {
    educationId: number;
    multiples?: Array<CotatoCreateMultipleQuizRequest>;
    shortQuizzes?: Array<CotatoCreateShortQuizRequest>;
}

export interface FindAllQuizzesForAdminCsQuizRequest {
    educationId: number;
}

export interface FindAllQuizzesForEducationTeamRequest {
    educationId: number;
}

export interface FindOneQuizForMemberRequest {
    quizId: number;
}

export interface FindQuizForAdminCsQuizRequest {
    quizId: number;
}

export interface QuizResultsRequest {
    educationId: number;
}

/**
 * 
 */
export class QuizControllerApi extends runtime.BaseAPI {

    /**
     */
    async addAdditionalAnswerRaw(requestParameters: AddAdditionalAnswerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cotatoAddAdditionalAnswerRequest'] == null) {
            throw new runtime.RequiredError(
                'cotatoAddAdditionalAnswerRequest',
                'Required parameter "cotatoAddAdditionalAnswerRequest" was null or undefined when calling addAdditionalAnswer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/quiz/cs-admin/answer/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CotatoAddAdditionalAnswerRequestToJSON(requestParameters['cotatoAddAdditionalAnswerRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addAdditionalAnswer(requestParameters: AddAdditionalAnswerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addAdditionalAnswerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async addAllQuizzesRaw(requestParameters: AddAllQuizzesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['educationId'] == null) {
            throw new runtime.RequiredError(
                'educationId',
                'Required parameter "educationId" was null or undefined when calling addAllQuizzes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['educationId'] != null) {
            queryParameters['educationId'] = requestParameters['educationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['multiples'] != null) {
            formParams.append('multiples', requestParameters['multiples']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['shortQuizzes'] != null) {
            formParams.append('shortQuizzes', requestParameters['shortQuizzes']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        const response = await this.request({
            path: `/v1/api/quiz/adds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addAllQuizzes(requestParameters: AddAllQuizzesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addAllQuizzesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async findAllQuizzesForAdminCsQuizRaw(requestParameters: FindAllQuizzesForAdminCsQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoAllQuizzesInCsQuizResponse>> {
        if (requestParameters['educationId'] == null) {
            throw new runtime.RequiredError(
                'educationId',
                'Required parameter "educationId" was null or undefined when calling findAllQuizzesForAdminCsQuiz().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['educationId'] != null) {
            queryParameters['educationId'] = requestParameters['educationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/quiz/cs-admin/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoAllQuizzesInCsQuizResponseFromJSON(jsonValue));
    }

    /**
     */
    async findAllQuizzesForAdminCsQuiz(requestParameters: FindAllQuizzesForAdminCsQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoAllQuizzesInCsQuizResponse> {
        const response = await this.findAllQuizzesForAdminCsQuizRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findAllQuizzesForEducationTeamRaw(requestParameters: FindAllQuizzesForEducationTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoAllQuizzesResponse>> {
        if (requestParameters['educationId'] == null) {
            throw new runtime.RequiredError(
                'educationId',
                'Required parameter "educationId" was null or undefined when calling findAllQuizzesForEducationTeam().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['educationId'] != null) {
            queryParameters['educationId'] = requestParameters['educationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/quiz/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoAllQuizzesResponseFromJSON(jsonValue));
    }

    /**
     */
    async findAllQuizzesForEducationTeam(requestParameters: FindAllQuizzesForEducationTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoAllQuizzesResponse> {
        const response = await this.findAllQuizzesForEducationTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneQuizForMemberRaw(requestParameters: FindOneQuizForMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoQuizResponse>> {
        if (requestParameters['quizId'] == null) {
            throw new runtime.RequiredError(
                'quizId',
                'Required parameter "quizId" was null or undefined when calling findOneQuizForMember().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/quiz/{quizId}`.replace(`{${"quizId"}}`, encodeURIComponent(String(requestParameters['quizId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoQuizResponseFromJSON(jsonValue));
    }

    /**
     */
    async findOneQuizForMember(requestParameters: FindOneQuizForMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoQuizResponse> {
        const response = await this.findOneQuizForMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findQuizForAdminCsQuizRaw(requestParameters: FindQuizForAdminCsQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoQuizInfoInCsQuizResponse>> {
        if (requestParameters['quizId'] == null) {
            throw new runtime.RequiredError(
                'quizId',
                'Required parameter "quizId" was null or undefined when calling findQuizForAdminCsQuiz().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['quizId'] != null) {
            queryParameters['quizId'] = requestParameters['quizId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/quiz/cs-admin`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoQuizInfoInCsQuizResponseFromJSON(jsonValue));
    }

    /**
     */
    async findQuizForAdminCsQuiz(requestParameters: FindQuizForAdminCsQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoQuizInfoInCsQuizResponse> {
        const response = await this.findQuizForAdminCsQuizRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async quizResultsRaw(requestParameters: QuizResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CotatoQuizResultInfo>>> {
        if (requestParameters['educationId'] == null) {
            throw new runtime.RequiredError(
                'educationId',
                'Required parameter "educationId" was null or undefined when calling quizResults().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['educationId'] != null) {
            queryParameters['educationId'] = requestParameters['educationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/quiz/cs-admin/results`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CotatoQuizResultInfoFromJSON));
    }

    /**
     */
    async quizResults(requestParameters: QuizResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CotatoQuizResultInfo>> {
        const response = await this.quizResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
