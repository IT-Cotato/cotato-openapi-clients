/* tslint:disable */
/* eslint-disable */
/**
 * CS-QUIZ 프로젝트 API 명세서
 * quiz api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  CotatoAddSessionImageResponse,
  CotatoAddSessionResponse,
  CotatoAttendResponse,
  CotatoAttendanceRecordResponse,
  CotatoAttendanceTimeResponse,
  CotatoAttendancesResponse,
  CotatoCsEducationOnSessionNumberResponse,
  CotatoDeleteSessionImageRequest,
  CotatoLocalTime,
  CotatoMemberAttendanceRecordsResponse,
  CotatoOfflineAttendanceRequest,
  CotatoOnlineAttendanceRequest,
  CotatoSessionListResponse,
  CotatoUpdateAttendanceRequest,
  CotatoUpdateSessionImageOrderRequest,
  CotatoUpdateSessionRequest,
} from '../models/index.js';
import {
    CotatoAddSessionImageResponseFromJSON,
    CotatoAddSessionImageResponseToJSON,
    CotatoAddSessionResponseFromJSON,
    CotatoAddSessionResponseToJSON,
    CotatoAttendResponseFromJSON,
    CotatoAttendResponseToJSON,
    CotatoAttendanceRecordResponseFromJSON,
    CotatoAttendanceRecordResponseToJSON,
    CotatoAttendanceTimeResponseFromJSON,
    CotatoAttendanceTimeResponseToJSON,
    CotatoAttendancesResponseFromJSON,
    CotatoAttendancesResponseToJSON,
    CotatoCsEducationOnSessionNumberResponseFromJSON,
    CotatoCsEducationOnSessionNumberResponseToJSON,
    CotatoDeleteSessionImageRequestFromJSON,
    CotatoDeleteSessionImageRequestToJSON,
    CotatoLocalTimeFromJSON,
    CotatoLocalTimeToJSON,
    CotatoMemberAttendanceRecordsResponseFromJSON,
    CotatoMemberAttendanceRecordsResponseToJSON,
    CotatoOfflineAttendanceRequestFromJSON,
    CotatoOfflineAttendanceRequestToJSON,
    CotatoOnlineAttendanceRequestFromJSON,
    CotatoOnlineAttendanceRequestToJSON,
    CotatoSessionListResponseFromJSON,
    CotatoSessionListResponseToJSON,
    CotatoUpdateAttendanceRequestFromJSON,
    CotatoUpdateAttendanceRequestToJSON,
    CotatoUpdateSessionImageOrderRequestFromJSON,
    CotatoUpdateSessionImageOrderRequestToJSON,
    CotatoUpdateSessionRequestFromJSON,
    CotatoUpdateSessionRequestToJSON,
} from '../models/index.js';

export interface AddSessionRequest {
    generationId: number;
    title: string;
    description: string;
    sessionDateTime: Date;
    images?: Array<Blob>;
    latitude?: number;
    longitude?: number;
    placeName?: string;
    attendanceDeadLine?: CotatoLocalTime;
    lateDeadLine?: CotatoLocalTime;
    itIssue?: AddSessionItIssueEnum;
    networking?: AddSessionNetworkingEnum;
    csEducation?: AddSessionCsEducationEnum;
    devTalk?: AddSessionDevTalkEnum;
}

export interface AdditionalSessionImageRequest {
    sessionId: number;
    image: Blob;
    order: number;
}

export interface DeleteSessionImageRequest {
    cotatoDeleteSessionImageRequest: CotatoDeleteSessionImageRequest;
}

export interface FindAllCsOnSessionsByGenerationIdRequest {
    generationId: number;
}

export interface FindAllRecordsByGenerationRequest {
    generationId: number;
}

export interface FindAttendanceRecordsRequest {
    generationId: number;
    month?: number;
}

export interface FindAttendanceRecordsByAttendanceRequest {
    attendanceId: number;
}

export interface FindAttendanceTimeInfoRequest {
    sessionId: number;
}

export interface FindAttendancesByGenerationRequest {
    generationId: number;
}

export interface FindSessionsByGenerationIdRequest {
    generationId: number;
}

export interface SubmitOfflineAttendanceRecordRequest {
    cotatoOfflineAttendanceRequest: CotatoOfflineAttendanceRequest;
}

export interface SubmitOnlineAttendanceRecordRequest {
    cotatoOnlineAttendanceRequest: CotatoOnlineAttendanceRequest;
}

export interface UpdateAttendanceRequest {
    cotatoUpdateAttendanceRequest: CotatoUpdateAttendanceRequest;
}

export interface UpdateSessionRequest {
    cotatoUpdateSessionRequest: CotatoUpdateSessionRequest;
}

export interface UpdateSessionImageOrderRequest {
    cotatoUpdateSessionImageOrderRequest: CotatoUpdateSessionImageOrderRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Session 추가 API
     */
    async addSessionRaw(requestParameters: AddSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoAddSessionResponse>> {
        if (requestParameters['generationId'] == null) {
            throw new runtime.RequiredError(
                'generationId',
                'Required parameter "generationId" was null or undefined when calling addSession().'
            );
        }

        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling addSession().'
            );
        }

        if (requestParameters['description'] == null) {
            throw new runtime.RequiredError(
                'description',
                'Required parameter "description" was null or undefined when calling addSession().'
            );
        }

        if (requestParameters['sessionDateTime'] == null) {
            throw new runtime.RequiredError(
                'sessionDateTime',
                'Required parameter "sessionDateTime" was null or undefined when calling addSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['generationId'] != null) {
            formParams.append('generationId', requestParameters['generationId'] as any);
        }

        if (requestParameters['images'] != null) {
            requestParameters['images'].forEach((element) => {
                formParams.append('images', element as any);
            })
        }

        if (requestParameters['title'] != null) {
            formParams.append('title', requestParameters['title'] as any);
        }

        if (requestParameters['description'] != null) {
            formParams.append('description', requestParameters['description'] as any);
        }

        if (requestParameters['latitude'] != null) {
            formParams.append('latitude', requestParameters['latitude'] as any);
        }

        if (requestParameters['longitude'] != null) {
            formParams.append('longitude', requestParameters['longitude'] as any);
        }

        if (requestParameters['placeName'] != null) {
            formParams.append('placeName', requestParameters['placeName'] as any);
        }

        if (requestParameters['sessionDateTime'] != null) {
            formParams.append('sessionDateTime', requestParameters['sessionDateTime'] as any);
        }

        if (requestParameters['attendanceDeadLine'] != null) {
            formParams.append('attendanceDeadLine', new Blob([JSON.stringify(CotatoLocalTimeToJSON(requestParameters['attendanceDeadLine']))], { type: "application/json", }));
                    }

        if (requestParameters['lateDeadLine'] != null) {
            formParams.append('lateDeadLine', new Blob([JSON.stringify(CotatoLocalTimeToJSON(requestParameters['lateDeadLine']))], { type: "application/json", }));
                    }

        if (requestParameters['itIssue'] != null) {
            formParams.append('itIssue', requestParameters['itIssue'] as any);
        }

        if (requestParameters['networking'] != null) {
            formParams.append('networking', requestParameters['networking'] as any);
        }

        if (requestParameters['csEducation'] != null) {
            formParams.append('csEducation', requestParameters['csEducation'] as any);
        }

        if (requestParameters['devTalk'] != null) {
            formParams.append('devTalk', requestParameters['devTalk'] as any);
        }

        const response = await this.request({
            path: `/v1/api/session/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoAddSessionResponseFromJSON(jsonValue));
    }

    /**
     * Session 추가 API
     */
    async addSession(requestParameters: AddSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoAddSessionResponse> {
        const response = await this.addSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 세션 사진 추가 API
     */
    async additionalSessionImageRaw(requestParameters: AdditionalSessionImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoAddSessionImageResponse>> {
        if (requestParameters['sessionId'] == null) {
            throw new runtime.RequiredError(
                'sessionId',
                'Required parameter "sessionId" was null or undefined when calling additionalSessionImage().'
            );
        }

        if (requestParameters['image'] == null) {
            throw new runtime.RequiredError(
                'image',
                'Required parameter "image" was null or undefined when calling additionalSessionImage().'
            );
        }

        if (requestParameters['order'] == null) {
            throw new runtime.RequiredError(
                'order',
                'Required parameter "order" was null or undefined when calling additionalSessionImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionId'] != null) {
            formParams.append('sessionId', requestParameters['sessionId'] as any);
        }

        if (requestParameters['image'] != null) {
            formParams.append('image', requestParameters['image'] as any);
        }

        if (requestParameters['order'] != null) {
            formParams.append('order', requestParameters['order'] as any);
        }

        const response = await this.request({
            path: `/v1/api/session/image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoAddSessionImageResponseFromJSON(jsonValue));
    }

    /**
     * 세션 사진 추가 API
     */
    async additionalSessionImage(requestParameters: AdditionalSessionImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoAddSessionImageResponse> {
        const response = await this.additionalSessionImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 세션 사진 삭제 API
     */
    async deleteSessionImageRaw(requestParameters: DeleteSessionImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cotatoDeleteSessionImageRequest'] == null) {
            throw new runtime.RequiredError(
                'cotatoDeleteSessionImageRequest',
                'Required parameter "cotatoDeleteSessionImageRequest" was null or undefined when calling deleteSessionImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/session/image`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: CotatoDeleteSessionImageRequestToJSON(requestParameters['cotatoDeleteSessionImageRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 세션 사진 삭제 API
     */
    async deleteSessionImage(requestParameters: DeleteSessionImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSessionImageRaw(requestParameters, initOverrides);
    }

    /**
     * CS ON인 세션 목록 반환 API
     */
    async findAllCsOnSessionsByGenerationIdRaw(requestParameters: FindAllCsOnSessionsByGenerationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CotatoCsEducationOnSessionNumberResponse>>> {
        if (requestParameters['generationId'] == null) {
            throw new runtime.RequiredError(
                'generationId',
                'Required parameter "generationId" was null or undefined when calling findAllCsOnSessionsByGenerationId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['generationId'] != null) {
            queryParameters['generationId'] = requestParameters['generationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/session/cs-on`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CotatoCsEducationOnSessionNumberResponseFromJSON));
    }

    /**
     * CS ON인 세션 목록 반환 API
     */
    async findAllCsOnSessionsByGenerationId(requestParameters: FindAllCsOnSessionsByGenerationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CotatoCsEducationOnSessionNumberResponse>> {
        const response = await this.findAllCsOnSessionsByGenerationIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 부원의 기수별 출결 기록 반환 API
     */
    async findAllRecordsByGenerationRaw(requestParameters: FindAllRecordsByGenerationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoMemberAttendanceRecordsResponse>> {
        if (requestParameters['generationId'] == null) {
            throw new runtime.RequiredError(
                'generationId',
                'Required parameter "generationId" was null or undefined when calling findAllRecordsByGeneration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['generationId'] != null) {
            queryParameters['generationId'] = requestParameters['generationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/api/attendances/records/members`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoMemberAttendanceRecordsResponseFromJSON(jsonValue));
    }

    /**
     * 부원의 기수별 출결 기록 반환 API
     */
    async findAllRecordsByGeneration(requestParameters: FindAllRecordsByGenerationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoMemberAttendanceRecordsResponse> {
        const response = await this.findAllRecordsByGenerationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원 출결사항 기간 단위 조회 API
     */
    async findAttendanceRecordsRaw(requestParameters: FindAttendanceRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CotatoAttendanceRecordResponse>>> {
        if (requestParameters['generationId'] == null) {
            throw new runtime.RequiredError(
                'generationId',
                'Required parameter "generationId" was null or undefined when calling findAttendanceRecords().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['generationId'] != null) {
            queryParameters['generationId'] = requestParameters['generationId'];
        }

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/api/attendances/records`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CotatoAttendanceRecordResponseFromJSON));
    }

    /**
     * 회원 출결사항 기간 단위 조회 API
     */
    async findAttendanceRecords(requestParameters: FindAttendanceRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CotatoAttendanceRecordResponse>> {
        const response = await this.findAttendanceRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원 출결사항 출석 단위 조회 API
     */
    async findAttendanceRecordsByAttendanceRaw(requestParameters: FindAttendanceRecordsByAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CotatoAttendanceRecordResponse>>> {
        if (requestParameters['attendanceId'] == null) {
            throw new runtime.RequiredError(
                'attendanceId',
                'Required parameter "attendanceId" was null or undefined when calling findAttendanceRecordsByAttendance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/api/attendances/{attendance-id}/records`.replace(`{${"attendance-id"}}`, encodeURIComponent(String(requestParameters['attendanceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CotatoAttendanceRecordResponseFromJSON));
    }

    /**
     * 회원 출결사항 출석 단위 조회 API
     */
    async findAttendanceRecordsByAttendance(requestParameters: FindAttendanceRecordsByAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CotatoAttendanceRecordResponse>> {
        const response = await this.findAttendanceRecordsByAttendanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 세션 시간 반환 API
     */
    async findAttendanceTimeInfoRaw(requestParameters: FindAttendanceTimeInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoAttendanceTimeResponse>> {
        if (requestParameters['sessionId'] == null) {
            throw new runtime.RequiredError(
                'sessionId',
                'Required parameter "sessionId" was null or undefined when calling findAttendanceTimeInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sessionId'] != null) {
            queryParameters['sessionId'] = requestParameters['sessionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/api/attendances/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoAttendanceTimeResponseFromJSON(jsonValue));
    }

    /**
     * 세션 시간 반환 API
     */
    async findAttendanceTimeInfo(requestParameters: FindAttendanceTimeInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoAttendanceTimeResponse> {
        const response = await this.findAttendanceTimeInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 기수별 출석 목록 조회 API
     */
    async findAttendancesByGenerationRaw(requestParameters: FindAttendancesByGenerationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoAttendancesResponse>> {
        if (requestParameters['generationId'] == null) {
            throw new runtime.RequiredError(
                'generationId',
                'Required parameter "generationId" was null or undefined when calling findAttendancesByGeneration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['generationId'] != null) {
            queryParameters['generationId'] = requestParameters['generationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/api/attendances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoAttendancesResponseFromJSON(jsonValue));
    }

    /**
     * 기수별 출석 목록 조회 API
     */
    async findAttendancesByGeneration(requestParameters: FindAttendancesByGenerationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoAttendancesResponse> {
        const response = await this.findAttendancesByGenerationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 세션 목록 반환 API
     */
    async findSessionsByGenerationIdRaw(requestParameters: FindSessionsByGenerationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CotatoSessionListResponse>>> {
        if (requestParameters['generationId'] == null) {
            throw new runtime.RequiredError(
                'generationId',
                'Required parameter "generationId" was null or undefined when calling findSessionsByGenerationId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['generationId'] != null) {
            queryParameters['generationId'] = requestParameters['generationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/session`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CotatoSessionListResponseFromJSON));
    }

    /**
     * 세션 목록 반환 API
     */
    async findSessionsByGenerationId(requestParameters: FindSessionsByGenerationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CotatoSessionListResponse>> {
        const response = await this.findSessionsByGenerationIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 대면 출결 입력 API
     */
    async submitOfflineAttendanceRecordRaw(requestParameters: SubmitOfflineAttendanceRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoAttendResponse>> {
        if (requestParameters['cotatoOfflineAttendanceRequest'] == null) {
            throw new runtime.RequiredError(
                'cotatoOfflineAttendanceRequest',
                'Required parameter "cotatoOfflineAttendanceRequest" was null or undefined when calling submitOfflineAttendanceRecord().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/api/attendances/records/offline`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CotatoOfflineAttendanceRequestToJSON(requestParameters['cotatoOfflineAttendanceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoAttendResponseFromJSON(jsonValue));
    }

    /**
     * 대면 출결 입력 API
     */
    async submitOfflineAttendanceRecord(requestParameters: SubmitOfflineAttendanceRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoAttendResponse> {
        const response = await this.submitOfflineAttendanceRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 비대면 출결 입력 API
     */
    async submitOnlineAttendanceRecordRaw(requestParameters: SubmitOnlineAttendanceRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoAttendResponse>> {
        if (requestParameters['cotatoOnlineAttendanceRequest'] == null) {
            throw new runtime.RequiredError(
                'cotatoOnlineAttendanceRequest',
                'Required parameter "cotatoOnlineAttendanceRequest" was null or undefined when calling submitOnlineAttendanceRecord().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/api/attendances/records/online`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CotatoOnlineAttendanceRequestToJSON(requestParameters['cotatoOnlineAttendanceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoAttendResponseFromJSON(jsonValue));
    }

    /**
     * 비대면 출결 입력 API
     */
    async submitOnlineAttendanceRecord(requestParameters: SubmitOnlineAttendanceRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoAttendResponse> {
        const response = await this.submitOnlineAttendanceRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 출석 정보 변경 API
     */
    async updateAttendanceRaw(requestParameters: UpdateAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cotatoUpdateAttendanceRequest'] == null) {
            throw new runtime.RequiredError(
                'cotatoUpdateAttendanceRequest',
                'Required parameter "cotatoUpdateAttendanceRequest" was null or undefined when calling updateAttendance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/api/attendances`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CotatoUpdateAttendanceRequestToJSON(requestParameters['cotatoUpdateAttendanceRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 출석 정보 변경 API
     */
    async updateAttendance(requestParameters: UpdateAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateAttendanceRaw(requestParameters, initOverrides);
    }

    /**
     * 세션 수정 API
     */
    async updateSessionRaw(requestParameters: UpdateSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cotatoUpdateSessionRequest'] == null) {
            throw new runtime.RequiredError(
                'cotatoUpdateSessionRequest',
                'Required parameter "cotatoUpdateSessionRequest" was null or undefined when calling updateSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/session/update`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CotatoUpdateSessionRequestToJSON(requestParameters['cotatoUpdateSessionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 세션 수정 API
     */
    async updateSession(requestParameters: UpdateSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateSessionRaw(requestParameters, initOverrides);
    }

    /**
     * 세션 사진 순서 변경 API
     */
    async updateSessionImageOrderRaw(requestParameters: UpdateSessionImageOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cotatoUpdateSessionImageOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'cotatoUpdateSessionImageOrderRequest',
                'Required parameter "cotatoUpdateSessionImageOrderRequest" was null or undefined when calling updateSessionImageOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/session/image/order`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CotatoUpdateSessionImageOrderRequestToJSON(requestParameters['cotatoUpdateSessionImageOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 세션 사진 순서 변경 API
     */
    async updateSessionImageOrder(requestParameters: UpdateSessionImageOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateSessionImageOrderRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const AddSessionItIssueEnum = {
    On: 'IT_ON',
    Off: 'IT_OFF'
} as const;
export type AddSessionItIssueEnum = typeof AddSessionItIssueEnum[keyof typeof AddSessionItIssueEnum];
/**
 * @export
 */
export const AddSessionNetworkingEnum = {
    On: 'NW_ON',
    Off: 'NW_OFF'
} as const;
export type AddSessionNetworkingEnum = typeof AddSessionNetworkingEnum[keyof typeof AddSessionNetworkingEnum];
/**
 * @export
 */
export const AddSessionCsEducationEnum = {
    On: 'CS_ON',
    Off: 'CS_OFF'
} as const;
export type AddSessionCsEducationEnum = typeof AddSessionCsEducationEnum[keyof typeof AddSessionCsEducationEnum];
/**
 * @export
 */
export const AddSessionDevTalkEnum = {
    On: 'DEVTALK_ON',
    Off: 'DEVTALK_OFF'
} as const;
export type AddSessionDevTalkEnum = typeof AddSessionDevTalkEnum[keyof typeof AddSessionDevTalkEnum];
