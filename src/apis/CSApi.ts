/* tslint:disable */
/* eslint-disable */
/**
 * COTATO 프로젝트 API 명세서
 * api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  CotatoRandomQuizReplyResponse,
  CotatoRandomTutorialQuizResponse,
} from '../models/index.js';
import {
    CotatoRandomQuizReplyResponseFromJSON,
    CotatoRandomQuizReplyResponseToJSON,
    CotatoRandomTutorialQuizResponseFromJSON,
    CotatoRandomTutorialQuizResponseToJSON,
} from '../models/index.js';

export interface ReplyToRandomQuizRequest {
    randomQuizId: number;
    input: number;
}

/**
 * 
 */
export class CSApi extends runtime.BaseAPI {

    /**
     * 외부인용 랜덤 퀴즈 반환 API
     */
    async pickRandomQuizRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoRandomTutorialQuizResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/api/random-quizzes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoRandomTutorialQuizResponseFromJSON(jsonValue));
    }

    /**
     * 외부인용 랜덤 퀴즈 반환 API
     */
    async pickRandomQuiz(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoRandomTutorialQuizResponse> {
        const response = await this.pickRandomQuizRaw(initOverrides);
        return await response.value();
    }

    /**
     * 외부인용 랜덤 퀴즈 제출 API
     */
    async replyToRandomQuizRaw(requestParameters: ReplyToRandomQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoRandomQuizReplyResponse>> {
        if (requestParameters['randomQuizId'] == null) {
            throw new runtime.RequiredError(
                'randomQuizId',
                'Required parameter "randomQuizId" was null or undefined when calling replyToRandomQuiz().'
            );
        }

        if (requestParameters['input'] == null) {
            throw new runtime.RequiredError(
                'input',
                'Required parameter "input" was null or undefined when calling replyToRandomQuiz().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['input'] != null) {
            queryParameters['input'] = requestParameters['input'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/api/random-quizzes/{randomQuizId}/reply`.replace(`{${"randomQuizId"}}`, encodeURIComponent(String(requestParameters['randomQuizId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoRandomQuizReplyResponseFromJSON(jsonValue));
    }

    /**
     * 외부인용 랜덤 퀴즈 제출 API
     */
    async replyToRandomQuiz(requestParameters: ReplyToRandomQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoRandomQuizReplyResponse> {
        const response = await this.replyToRandomQuizRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
