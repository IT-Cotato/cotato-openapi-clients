/* tslint:disable */
/* eslint-disable */
/**
 * COTATO 프로젝트 API 명세서
 * api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  CotatoRecordsAndScorerResponse,
  CotatoRegradeRequest,
  CotatoReplyRequest,
  CotatoReplyResponse,
} from '../models/index.js';
import {
    CotatoRecordsAndScorerResponseFromJSON,
    CotatoRecordsAndScorerResponseToJSON,
    CotatoRegradeRequestFromJSON,
    CotatoRegradeRequestToJSON,
    CotatoReplyRequestFromJSON,
    CotatoReplyRequestToJSON,
    CotatoReplyResponseFromJSON,
    CotatoReplyResponseToJSON,
} from '../models/index.js';

export interface FindRecordsAndScorerByQuizRequest {
    quizId: number;
}

export interface RegradeQuizRequest {
    cotatoRegradeRequest: CotatoRegradeRequest;
}

export interface ReplyToQuizRequest {
    cotatoReplyRequest: CotatoReplyRequest;
}

/**
 * 
 */
export class RecordControllerApi extends runtime.BaseAPI {

    /**
     */
    async findRecordsAndScorerByQuizRaw(requestParameters: FindRecordsAndScorerByQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoRecordsAndScorerResponse>> {
        if (requestParameters['quizId'] == null) {
            throw new runtime.RequiredError(
                'quizId',
                'Required parameter "quizId" was null or undefined when calling findRecordsAndScorerByQuiz().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['quizId'] != null) {
            queryParameters['quizId'] = requestParameters['quizId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/record/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoRecordsAndScorerResponseFromJSON(jsonValue));
    }

    /**
     */
    async findRecordsAndScorerByQuiz(requestParameters: FindRecordsAndScorerByQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoRecordsAndScorerResponse> {
        const response = await this.findRecordsAndScorerByQuizRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async regradeQuizRaw(requestParameters: RegradeQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cotatoRegradeRequest'] == null) {
            throw new runtime.RequiredError(
                'cotatoRegradeRequest',
                'Required parameter "cotatoRegradeRequest" was null or undefined when calling regradeQuiz().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/record/regrade`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CotatoRegradeRequestToJSON(requestParameters['cotatoRegradeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async regradeQuiz(requestParameters: RegradeQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.regradeQuizRaw(requestParameters, initOverrides);
    }

    /**
     */
    async replyToQuizRaw(requestParameters: ReplyToQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoReplyResponse>> {
        if (requestParameters['cotatoReplyRequest'] == null) {
            throw new runtime.RequiredError(
                'cotatoReplyRequest',
                'Required parameter "cotatoReplyRequest" was null or undefined when calling replyToQuiz().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/record/reply`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CotatoReplyRequestToJSON(requestParameters['cotatoReplyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoReplyResponseFromJSON(jsonValue));
    }

    /**
     */
    async replyToQuiz(requestParameters: ReplyToQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoReplyResponse> {
        const response = await this.replyToQuizRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
