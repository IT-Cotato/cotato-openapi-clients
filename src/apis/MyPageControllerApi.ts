/* tslint:disable */
/* eslint-disable */
/**
 * COTATO 프로젝트 API 명세서
 * api 명세서
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  CotatoHallOfFameResponse,
} from '../models/index.js';
import {
    CotatoHallOfFameResponseFromJSON,
    CotatoHallOfFameResponseToJSON,
} from '../models/index.js';

export interface FindHallOfFameRequest {
    generationId: number;
}

/**
 * 
 */
export class MyPageControllerApi extends runtime.BaseAPI {

    /**
     */
    async findHallOfFameRaw(requestParameters: FindHallOfFameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CotatoHallOfFameResponse>> {
        if (requestParameters['generationId'] == null) {
            throw new runtime.RequiredError(
                'generationId',
                'Required parameter "generationId" was null or undefined when calling findHallOfFame().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['generationId'] != null) {
            queryParameters['generationId'] = requestParameters['generationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/api/mypage/hall-of-fame`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CotatoHallOfFameResponseFromJSON(jsonValue));
    }

    /**
     */
    async findHallOfFame(requestParameters: FindHallOfFameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CotatoHallOfFameResponse> {
        const response = await this.findHallOfFameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
